
difflib∑
Iterabletyping.Iterable"builtins.object*Â
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@z27z35z36z37z38z39z3108PXj27j35j36j37j38j39j310Ó
Iteratortyping.Iterator"typing.Iterable*î
nexttyping.Iterator.next"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@z27*—
__iter__typing.Iterator.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iteratorz27z35z36z37z38z39z310*±
__next__typing.Iterator.__next__"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@z35z36z37z38z39z3108PXj27j35j36j37j38j39j310”

NamedTupletyping.NamedTuple"builtins.tuple*–
__init__typing.NamedTuple.__init__"
None*0
self&
typing.NamedTuple"typing.NamedTuple*2
typename$
builtins.unicode"builtins.unicode*û
fieldsè
,typing.Iterable[Tuple[builtins.unicode,Any]]N
Tuple[builtins.unicode,Any]$
builtins.unicode"builtins.unicode
Any"typing.Iterable *
kwargs
Anyz27*Ã
__init__typing.NamedTuple.__init__"
None*0
self&
typing.NamedTuple"typing.NamedTuple**
typename
builtins.str"builtins.str*ç
fields
(typing.Iterable[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterable *
kwargs
Anyz35z36z37z38z39z310* 
_maketyping.NamedTuple._make"
	typing._T*+
cls"
Type[typing._T]
	typing._T*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable0:classmethodpz27z35z36z37z38z39z310*¿
_asdicttyping.NamedTuple._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*0
self&
typing.NamedTuple"typing.NamedTuplez27z38z39z310*œ
_asdicttyping.NamedTuple._asdict"k
)collections.OrderedDict[builtins.str,Any]
builtins.str"builtins.str
Any"collections.OrderedDict*0
self&
typing.NamedTuple"typing.NamedTuplez35z36z37*Ä
_replacetyping.NamedTuple._replace"
	typing._T*
self
	typing._T*
kwargs
Anyz27z35z36z37z38z39z310j27j35j36j37j38j39j310â
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310…
TypeVartyping.TypeVar"builtins.object*ﬁ
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*H
bound;
Union[Type[Any],None]
	Type[Any]
Any
None */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z27*û
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z35z36z37z38z39z310j27j35j36j37j38j39j310Ç
Matchdifflib.Match"builtins.tuple*
_replacedifflib.Match._replace"
difflib.Match._NT* 
_self
difflib.Match._NT*%
a
builtins.int"builtins.int *%
b
builtins.int"builtins.int *(
size
builtins.int"builtins.int z27z35z36z37z38z39z310*Ñ
__new__difflib.Match.__new__"
difflib.Match._NT*<
_cls2
Type[difflib.Match._NT]
difflib.Match._NT*#
a
builtins.int"builtins.int*#
b
builtins.int"builtins.int*&
size
builtins.int"builtins.intz27z35z36z37z38z39z310*∏
_asdictdifflib.Match._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict* 
_self
difflib.Match._NTz27z35z36z37z38z39z310*á
_makedifflib.Match._make"
difflib.Match._NT*<
_cls2
Type[difflib.Match._NT]
difflib.Match._NT*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz27z35z36z37z38z39z310j27j35j36j37j38j39j310œ&
SequenceMatcherdifflib.SequenceMatcher"builtins.object*á
__init__ difflib.SequenceMatcher.__init__"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*ï
isjunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *G
a>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence *G
b>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence *.
autojunk
builtins.bool"builtins.bool z27z35z36z37z38z39z310*ª
set_seqs difflib.SequenceMatcher.set_seqs"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*E
a>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*E
b>
typing.Sequence[difflib._T]

difflib._T"typing.Sequencez27z35z36z37z38z39z310*Ù
set_seq1 difflib.SequenceMatcher.set_seq1"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*E
a>
typing.Sequence[difflib._T]

difflib._T"typing.Sequencez27z35z36z37z38z39z310*Ù
set_seq2 difflib.SequenceMatcher.set_seq2"
None*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*E
b>
typing.Sequence[difflib._T]

difflib._T"typing.Sequencez27z35z36z37z38z39z310*ÿ
find_longest_match*difflib.SequenceMatcher.find_longest_match"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*%
alo
builtins.int"builtins.int*%
ahi
builtins.int"builtins.int*%
blo
builtins.int"builtins.int*%
bhi
builtins.int"builtins.intz27z35z36z37z38*•
find_longest_match*difflib.SequenceMatcher.find_longest_match"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*'
alo
builtins.int"builtins.int *O
ahiD
Union[builtins.int,None]
builtins.int"builtins.int
None *'
blo
builtins.int"builtins.int *O
bhiD
Union[builtins.int,None]
builtins.int"builtins.int
None z39z310*ó
get_matching_blocks+difflib.SequenceMatcher.get_matching_blocks"€
<builtins.list[Tuple[builtins.int,builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcherz27z35z36z37z38z39z310*˜
get_opcodes#difflib.SequenceMatcher.get_opcodes"À
Vbuiltins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]·
GTuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcherz27z35z36z37z38z39z310*´
get_grouped_opcodes+difflib.SequenceMatcher.get_grouped_opcodes"»
gtyping.Iterable[builtins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]]À
Vbuiltins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]·
GTuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list"typing.Iterable*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*%
n
builtins.int"builtins.int z27z35z36z37z38z39z310*ø
ratiodifflib.SequenceMatcher.ratio" 
builtins.float"builtins.float*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcherz27z35z36z37z38z39z310*À
quick_ratio#difflib.SequenceMatcher.quick_ratio" 
builtins.float"builtins.float*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcherz27z35z36z37z38z39z310*’
real_quick_ratio(difflib.SequenceMatcher.real_quick_ratio" 
builtins.float"builtins.float*X
selfN
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcherz27z35z36z37z38z39z310*è
__class_getitem__)difflib.SequenceMatcher.__class_getitem__"(
types.GenericAlias"types.GenericAlias*Ü
cls}
)Type[difflib.SequenceMatcher[difflib._T]]N
#difflib.SequenceMatcher[difflib._T]

difflib._T"difflib.SequenceMatcher*
item
Anypz39z310Pj27j35j36j37j38j39j310˙

Differdifflib.Differ"builtins.object*Ñ
__init__difflib.Differ.__init__"
None**
self 
difflib.Differ"difflib.Differ*Ñ
linejunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ñ
charjunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None z27z35z36z37z38z39z310*√
comparedifflib.Differ.compare"J
!typing.Iterator[difflib._StrType]
difflib._StrType"typing.Iterator**
self 
difflib.Differ"difflib.Differ*Q
aJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*Q
bJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequencez27*‰
comparedifflib.Differ.compare"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator**
self 
difflib.Differ"difflib.Differ*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequencez35z36z37z38z39z310j27j35j36j37j38j39j310≥
HtmlDiffdifflib.HtmlDiff"builtins.object*è
__init__difflib.HtmlDiff.__init__"
None*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*+
tabsize
builtins.int"builtins.int *V

wrapcolumnD
Union[builtins.int,None]
builtins.int"builtins.int
None *Ñ
linejunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ñ
charjunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None z27z35z36z37z38z39z310*Ã
	make_filedifflib.HtmlDiff.make_file"
difflib._StrType*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*Y
	fromlinesJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*W
tolinesJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*$
fromdesc
difflib._StrType *"
todesc
difflib._StrType *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int z27*Æ
	make_filedifflib.HtmlDiff.make_file"
builtins.str"builtins.str*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*]
	fromlinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*[
tolinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromdesc
builtins.str"builtins.str **
todesc
builtins.str"builtins.str *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int *+
charset
builtins.str"builtins.str z35z36z37z38z39z310*Œ

make_tabledifflib.HtmlDiff.make_table"
difflib._StrType*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*Y
	fromlinesJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*W
tolinesJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*$
fromdesc
difflib._StrType *"
todesc
difflib._StrType *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int z27*É

make_tabledifflib.HtmlDiff.make_table"
builtins.str"builtins.str*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*]
	fromlinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*[
tolinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromdesc
builtins.str"builtins.str **
todesc
builtins.str"builtins.str *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int z35z36z37z38z39z310j27j35j36j37j38j39j310Ü
GenericAliastypes.GenericAlias"builtins.object*≠
__init__types.GenericAlias.__init__"
None*2
self(
types.GenericAlias"types.GenericAlias**
origin
builtins.type"builtins.type*
args
Anyz39z310*ó
__getattr__types.GenericAlias.__getattr__"
Any*0
self(
types.GenericAlias"types.GenericAlias*$
name
builtins.str"builtins.strz39z310j39j310D
overloadtyping.overload"
	typing._F*
f
	typing._Fz27\
overloadtyping.overload"
	typing._F*
func
	typing._Fz35z36z37z38z39z310|
IS_LINE_JUNKdifflib.IS_LINE_JUNK"
builtins.bool"builtins.bool*
line
difflib._StrType*
pat
Any z27ô
IS_LINE_JUNKdifflib.IS_LINE_JUNK"
builtins.bool"builtins.bool*&
line
builtins.str"builtins.str*
pat
Any z35z36z37z38z39z310ê
IS_CHARACTER_JUNKdifflib.IS_CHARACTER_JUNK"
builtins.bool"builtins.bool*
ch
difflib._StrType*
ws
difflib._StrType z27µ
IS_CHARACTER_JUNKdifflib.IS_CHARACTER_JUNK"
builtins.bool"builtins.bool*$
ch
builtins.str"builtins.str*&
ws
builtins.str"builtins.str z35z36z37z38z39z310É
unified_diffdifflib.unified_diff"J
!typing.Iterator[difflib._StrType]
difflib._StrType"typing.Iterator*Q
aJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*Q
bJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*$
fromfile
difflib._StrType *"
tofile
difflib._StrType *(
fromfiledate
difflib._StrType *&

tofiledate
difflib._StrType *%
n
builtins.int"builtins.int *$
lineterm
difflib._StrType z27Ã
unified_diffdifflib.unified_diff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromfile
builtins.str"builtins.str **
tofile
builtins.str"builtins.str *0
fromfiledate
builtins.str"builtins.str *.

tofiledate
builtins.str"builtins.str *%
n
builtins.int"builtins.int *,
lineterm
builtins.str"builtins.str z35z36z37z38z39z310É
context_diffdifflib.context_diff"J
!typing.Iterator[difflib._StrType]
difflib._StrType"typing.Iterator*Q
aJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*Q
bJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*$
fromfile
difflib._StrType *"
tofile
difflib._StrType *(
fromfiledate
difflib._StrType *&

tofiledate
difflib._StrType *%
n
builtins.int"builtins.int *$
lineterm
difflib._StrType z27Ã
context_diffdifflib.context_diff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromfile
builtins.str"builtins.str **
tofile
builtins.str"builtins.str *0
fromfiledate
builtins.str"builtins.str *.

tofiledate
builtins.str"builtins.str *%
n
builtins.int"builtins.int *,
lineterm
builtins.str"builtins.str z35z36z37z38z39z310ö
ndiffdifflib.ndiff"J
!typing.Iterator[difflib._StrType]
difflib._StrType"typing.Iterator*Q
aJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*Q
bJ
!typing.Sequence[difflib._StrType]
difflib._StrType"typing.Sequence*Ñ
linejunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ñ
charjunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None z27ª
ndiffdifflib.ndiff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*Ñ
linejunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ñ
charjunkÛ
KUnion[CallableType[builtins.function],CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.functionK
CallableType[builtins.function]&
builtins.function"builtins.function
None z35z36z37z38z39z310Í
restoredifflib.restore"J
!typing.Iterator[difflib._StrType]
difflib._StrType"typing.Iterator*U
deltaJ
!typing.Iterable[difflib._StrType]
difflib._StrType"typing.Iterable*'
which
builtins.int"builtins.intz27á
restoredifflib.restore"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*Y
deltaN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*'
which
builtins.int"builtins.intz35z36z37z38z39z310∆

diff_bytesdifflib.diff_bytes"T
typing.Iterator[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterator*V
dfuncK
CallableType[builtins.function]&
builtins.function"builtins.function*[
aT
typing.Sequence[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Sequence*[
bT
typing.Sequence[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Sequence*0
fromfile 
builtins.bytes"builtins.bytes *.
tofile 
builtins.bytes"builtins.bytes *4
fromfiledate 
builtins.bytes"builtins.bytes *2

tofiledate 
builtins.bytes"builtins.bytes *%
n
builtins.int"builtins.int *0
lineterm 
builtins.bytes"builtins.bytes z35z36z37z38z39z310"ã
get_close_matchesdifflib.get_close_matchesÀ
get_close_matchesdifflib.get_close_matches"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*
word
typing.AnyStr*W
possibilitiesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable*%
n
builtins.int"builtins.int *.
cutoff 
builtins.float"builtins.float 0:overloadXÔ
get_close_matchesdifflib.get_close_matches"{
*builtins.list[typing.Sequence[difflib._T]]>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence"builtins.list*H
word>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence*í
possibilities
,typing.Iterable[typing.Sequence[difflib._T]]>
typing.Sequence[difflib._T]

difflib._T"typing.Sequence"typing.Iterable*%
n
builtins.int"builtins.int *.
cutoff 
builtins.float"builtins.float 0:overloadX"27"35"36"37"38"39"310*R
Any
typing.Any"
builtins.object"builtins.object"27"35"36"37"38"39"310*d
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310*b
Generictyping.Generic*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310*d
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310*^
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310*^
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310