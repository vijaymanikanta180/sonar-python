
lzmaº$
IO	typing.IO"typing.Iterator*ü
modetyping.IO.mode"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z35z36z37z38z39z310*ü
nametyping.IO.name"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z35z36z37z38z39z310*ì
closetyping.IO.close"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*•
closedtyping.IO.closed"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z35z36z37z38z39z310*©
filenotyping.IO.fileno"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*ì
flushtyping.IO.flush"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*´
isattytyping.IO.isatty"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*¡
readtyping.IO.read"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*%
n
builtins.int"builtins.int 0:abstractmethod@z35z36z37z38z39z310*Ø
readabletyping.IO.readable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*Õ
readlinetyping.IO.readline"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*)
limit
builtins.int"builtins.int 0:abstractmethod@z35z36z37z38z39z310*˝
	readlinestyping.IO.readlines"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
hint
builtins.int"builtins.int 0:abstractmethod@z35z36z37z38z39z310*˚
seektyping.IO.seek"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int 0:abstractmethod@z35z36z37z38z39z310*Ø
seekabletyping.IO.seekable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*•
telltyping.IO.tell"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*ˇ
truncatetyping.IO.truncate"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:abstractmethod@z35z36z37z38z39z310*Ø
writabletyping.IO.writable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*¡
writetyping.IO.write"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
s
typing.AnyStr0:abstractmethod@z35z36z37z38z39z310*Ó

writelinestyping.IO.writelines"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*O
linesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable0:abstractmethod@z35z36z37z38z39z310*¢
__next__typing.IO.__next__"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*”
__iter__typing.IO.__iter__"D
typing.Iterator[typing.AnyStr]
typing.AnyStr"typing.Iterator*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*…
	__enter__typing.IO.__enter__"8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310*æ
__exit__typing.IO.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*ê
tä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*k
valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*f
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None0:abstractmethod@z35z36z37z38z39z310Pj35j36j37j38j39j310í
Mappingtyping.Mapping"typing.Collection*Â
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@z35z36z37z38z39z310*≥
itemstyping.Mapping.items"ë
3typing.AbstractSet[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*„
keystyping.Mapping.keys"D
typing.AbstractSet[typing._KT]

typing._KT"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Î
valuestyping.Mapping.values"H
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Ù
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.objectz35z36z37z38z39z3102ﬂ
gettyping.Mapping.getÂ
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT0:overloadX¬
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadX"35"36"37"38"39"310Pj35j36j37j38j39j310¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310◊
TextIOtyping.TextIO"	typing.IO*ì
buffertyping.TextIO.buffer""
typing.BinaryIO"typing.BinaryIO*(
self
typing.TextIO"typing.TextIO0:property`z35z36z37z38z39z310*ë
encodingtyping.TextIO.encoding"
builtins.str"builtins.str*(
self
typing.TextIO"typing.TextIO0:property`z35z36z37z38z39z310*µ
errorstyping.TextIO.errors"D
Union[builtins.str,None]
builtins.str"builtins.str
None*(
self
typing.TextIO"typing.TextIO0:property`z35z36z37z38z39z310*ù
line_bufferingtyping.TextIO.line_buffering"
builtins.int"builtins.int*(
self
typing.TextIO"typing.TextIO0:property`z35z36z37z38z39z310*|
newlinestyping.TextIO.newlines"
Any*(
self
typing.TextIO"typing.TextIO0:property`z35z36z37z38z39z310*ô
	__enter__typing.TextIO.__enter__"
typing.TextIO"typing.TextIO*&
self
typing.TextIO"typing.TextIO0:abstractmethod@z35z36z37z38z39z310j35j36j37j38j39j310‰
TypeVartyping.TypeVar"builtins.object*û
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z35z36z37z38z39z310j35j36j37j38j39j310Ω
LZMADecompressorlzma.LZMADecompressor"builtins.object*±
__init__lzma.LZMADecompressor.__init__"
None*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *T
memlimitD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39z310*ˇ

decompress lzma.LZMADecompressor.decompress" 
builtins.bytes"builtins.bytes*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor**
data 
builtins.bytes"builtins.bytes*.

max_length
builtins.int"builtins.int z35z36z37z38z39z310*£
checklzma.LZMADecompressor.check"
builtins.int"builtins.int*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z39z310*°
eoflzma.LZMADecompressor.eof"
builtins.bool"builtins.bool*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z39z310*≥
unused_data!lzma.LZMADecompressor.unused_data" 
builtins.bytes"builtins.bytes*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z39z310*±
needs_input!lzma.LZMADecompressor.needs_input"
builtins.bool"builtins.bool*8
self.
lzma.LZMADecompressor"lzma.LZMADecompressor0:property`z35z36z37z38z39z310j35j36j37j38j39j310Ñ
LZMACompressorlzma.LZMACompressor"builtins.object*‘
__init__lzma.LZMACompressor.__init__"
None*4
self*
lzma.LZMACompressor"lzma.LZMACompressor*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39z310*≈
compresslzma.LZMACompressor.compress" 
builtins.bytes"builtins.bytes*4
self*
lzma.LZMACompressor"lzma.LZMACompressor**
__data 
builtins.bytes"builtins.bytesz35z36z37z38z39z310*ì
flushlzma.LZMACompressor.flush" 
builtins.bytes"builtins.bytes*4
self*
lzma.LZMACompressor"lzma.LZMACompressorz35z36z37z38z39z310j35j36j37j38j39j310H
	LZMAErrorlzma.LZMAError"builtins.Exceptionj35j36j37j38j39j310
LZMAFilelzma.LZMAFile"io.BufferedIOBase"	typing.IO*•
__init__lzma.LZMAFile.__init__"
None*(
self
lzma.LZMAFile"lzma.LZMAFile*∂
filename•
wUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],typing.IO[builtins.bytes],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLikeH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO
None *(
mode
builtins.str"builtins.str *R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39z310*_
	__enter__lzma.LZMAFile.__enter__"
lzma._T*
self
lzma._Tz35z36z37z38z39z310*i
closelzma.LZMAFile.close"
None*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39z310*è
closedlzma.LZMAFile.closed"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFile0:property`z35z36z37z38z39z310*
filenolzma.LZMAFile.fileno"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39z310*Ö
seekablelzma.LZMAFile.seekable"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39z310*Ö
readablelzma.LZMAFile.readable"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39z310*Ö
writablelzma.LZMAFile.writable"
builtins.bool"builtins.bool*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39z310*©
peeklzma.LZMAFile.peek" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*(
size
builtins.int"builtins.int z35z36z37z38z39z310*—
readlzma.LZMAFile.read" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None z35z36z37z38z39z310*´
read1lzma.LZMAFile.read1" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*(
size
builtins.int"builtins.int z35z36z37z38z39z310*Ÿ
readlinelzma.LZMAFile.readline" 
builtins.bytes"builtins.bytes*(
self
lzma.LZMAFile"lzma.LZMAFile*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None z35z36z37z38z39z310*£
writelzma.LZMAFile.write"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFile*£
dataò
bTypeAlias[Union[builtins.bytes,builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap]]ï
WUnion[builtins.bytes,builtins.bytearray,builtins.memoryview,array.array[Any],mmap.mmap] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray*
builtins.memoryview"builtins.memoryview(
array.array[Any]
Any"array.array
	mmap.mmap"	mmap.mmap"_typeshed.ReadableBufferz35z36z37z38z39z310*—
seeklzma.LZMAFile.seek"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFile*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int z35z36z37z38z39z310*{
telllzma.LZMAFile.tell"
builtins.int"builtins.int*(
self
lzma.LZMAFile"lzma.LZMAFilez35z36z37z38z39z310j35j36j37j38j39j310\
overloadtyping.overload"
	typing._F*
func
	typing._Fz35z36z37z38z39z310´
compresslzma.compress" 
builtins.bytes"builtins.bytes**
data 
builtins.bytes"builtins.bytes**
format
builtins.int"builtins.int *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39z310Ü

decompresslzma.decompress" 
builtins.bytes"builtins.bytes**
data 
builtins.bytes"builtins.bytes**
format
builtins.int"builtins.int *T
memlimitD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None z35z36z37z38z39z310í
is_check_supportedlzma.is_check_supported"
builtins.bool"builtins.bool**

__check_id
builtins.int"builtins.intz35z36z37z38z39z310"€A
open	lzma.openª
open	lzma.open"
lzma.LZMAFile"lzma.LZMAFile*ƒ
filenameµ
èTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]]å
ÑUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO"lzma._PathOrFile*µ
mode®
2Union[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str *R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *D
check7
Literal[builtins.int]	
builtins.int"builtins.int *
preset
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *
encoding
None *
errors
None *
newline
None 0:overloadX—
open	lzma.open"
lzma.LZMAFile"lzma.LZMAFile*ƒ
filenameµ
èTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]]å
ÑUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO"lzma._PathOrFile*™
modeü
ïTypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]Â
äUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"lzma._OpenBinaryWritingMode*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *
encoding
None *
errors
None *
newline
None 0:overloadX˚	
open	lzma.open"
typing.TextIO"typing.TextIO*≈
filename∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*A
mode7
Literal[builtins.str]	
builtins.str"builtins.str*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *D
check7
Literal[builtins.int]	
builtins.int"builtins.int *
preset
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX”
open	lzma.open"
typing.TextIO"typing.TextIO*≈
filename∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath*˜
modeÏ
STypeAlias[Union[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]]˜
HUnion[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str"lzma._OpenTextWritingMode*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX»
open	lzma.open"f
"Union[lzma.LZMAFile,typing.TextIO]
lzma.LZMAFile"lzma.LZMAFile
typing.TextIO"typing.TextIO*ƒ
filenameµ
èTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]]å
ÑUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],typing.IO[builtins.bytes]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPathH
typing.IO[builtins.bytes] 
builtins.bytes"builtins.bytes"	typing.IO"lzma._PathOrFile*&
mode
builtins.str"builtins.str*R
formatD
Union[builtins.int,None]
builtins.int"builtins.int
None *)
check
builtins.int"builtins.int *R
presetD
Union[builtins.int,None]
builtins.int"builtins.int
None *˝
filtersÌ
=Union[typing.Sequence[typing.Mapping[builtins.str,Any]],None]ü
1typing.Sequence[typing.Mapping[builtins.str,Any]]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping"typing.Sequence
None *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
errorsD
Union[builtins.str,None]
builtins.str"builtins.str
None *S
newlineD
Union[builtins.str,None]
builtins.str"builtins.str
None 0:overloadX"35"36"37"38"39"310*#
ioio *35*36*37*38*39*310*N
Any
typing.Any"
builtins.object"builtins.object*35*36*37*38*39*310*`
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*Z
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*
Literaltyping_extensions.Literal@
typing_extensions._SpecialForm"typing_extensions._SpecialForm*35*36*37*38*39*310*V
FORMAT_AUTOlzma.FORMAT_AUTO
builtins.int"builtins.int*35*36*37*38*39*310*R
	FORMAT_XZlzma.FORMAT_XZ
builtins.int"builtins.int*35*36*37*38*39*310*X
FORMAT_ALONElzma.FORMAT_ALONE
builtins.int"builtins.int*35*36*37*38*39*310*T

FORMAT_RAWlzma.FORMAT_RAW
builtins.int"builtins.int*35*36*37*38*39*310*T

CHECK_NONElzma.CHECK_NONE
builtins.int"builtins.int*35*36*37*38*39*310*V
CHECK_CRC32lzma.CHECK_CRC32
builtins.int"builtins.int*35*36*37*38*39*310*V
CHECK_CRC64lzma.CHECK_CRC64
builtins.int"builtins.int*35*36*37*38*39*310*X
CHECK_SHA256lzma.CHECK_SHA256
builtins.int"builtins.int*35*36*37*38*39*310*X
CHECK_ID_MAXlzma.CHECK_ID_MAX
builtins.int"builtins.int*35*36*37*38*39*310*Z
CHECK_UNKNOWNlzma.CHECK_UNKNOWN
builtins.int"builtins.int*35*36*37*38*39*310*X
FILTER_LZMA1lzma.FILTER_LZMA1
builtins.int"builtins.int*35*36*37*38*39*310*X
FILTER_LZMA2lzma.FILTER_LZMA2
builtins.int"builtins.int*35*36*37*38*39*310*X
FILTER_DELTAlzma.FILTER_DELTA
builtins.int"builtins.int*35*36*37*38*39*310*T

FILTER_X86lzma.FILTER_X86
builtins.int"builtins.int*35*36*37*38*39*310*V
FILTER_IA64lzma.FILTER_IA64
builtins.int"builtins.int*35*36*37*38*39*310*T

FILTER_ARMlzma.FILTER_ARM
builtins.int"builtins.int*35*36*37*38*39*310*^
FILTER_ARMTHUMBlzma.FILTER_ARMTHUMB
builtins.int"builtins.int*35*36*37*38*39*310*X
FILTER_SPARClzma.FILTER_SPARC
builtins.int"builtins.int*35*36*37*38*39*310*\
FILTER_POWERPClzma.FILTER_POWERPC
builtins.int"builtins.int*35*36*37*38*39*310*L
MF_HC3lzma.MF_HC3
builtins.int"builtins.int*35*36*37*38*39*310*L
MF_HC4lzma.MF_HC4
builtins.int"builtins.int*35*36*37*38*39*310*L
MF_BT2lzma.MF_BT2
builtins.int"builtins.int*35*36*37*38*39*310*L
MF_BT3lzma.MF_BT3
builtins.int"builtins.int*35*36*37*38*39*310*L
MF_BT4lzma.MF_BT4
builtins.int"builtins.int*35*36*37*38*39*310*R
	MODE_FASTlzma.MODE_FAST
builtins.int"builtins.int*35*36*37*38*39*310*V
MODE_NORMALlzma.MODE_NORMAL
builtins.int"builtins.int*35*36*37*38*39*310*\
PRESET_DEFAULTlzma.PRESET_DEFAULT
builtins.int"builtins.int*35*36*37*38*39*310*\
PRESET_EXTREMElzma.PRESET_EXTREME
builtins.int"builtins.int*35*36*37*38*39*310