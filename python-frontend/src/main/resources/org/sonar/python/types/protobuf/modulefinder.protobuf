
modulefinderØ 
CodeTypetypes.CodeType"builtins.object*ï
__init__types.CodeType.__init__"
None**
self 
types.CodeType"types.CodeType**
argcount
builtins.int"builtins.int*)
nlocals
builtins.int"builtins.int*+
	stacksize
builtins.int"builtins.int*'
flags
builtins.int"builtins.int*,

codestring
builtins.str"builtins.str*=
	constants.
builtins.tuple[Any]
Any"builtins.tuple*W
namesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*Z
varnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple**
filename
builtins.str"builtins.str*&
name
builtins.str"builtins.str*-
firstlineno
builtins.int"builtins.int*(
lnotab
builtins.str"builtins.str*\
freevarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *\
cellvarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple z27*◊
__init__types.CodeType.__init__"
None**
self 
types.CodeType"types.CodeType**
argcount
builtins.int"builtins.int*0
kwonlyargcount
builtins.int"builtins.int*)
nlocals
builtins.int"builtins.int*+
	stacksize
builtins.int"builtins.int*'
flags
builtins.int"builtins.int*0

codestring 
builtins.bytes"builtins.bytes*=
	constants.
builtins.tuple[Any]
Any"builtins.tuple*W
namesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*Z
varnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple**
filename
builtins.str"builtins.str*&
name
builtins.str"builtins.str*-
firstlineno
builtins.int"builtins.int*,
lnotab 
builtins.bytes"builtins.bytes*\
freevarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *\
cellvarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple z35z36z37*ã
__init__types.CodeType.__init__"
None**
self 
types.CodeType"types.CodeType**
argcount
builtins.int"builtins.int*1
posonlyargcount
builtins.int"builtins.int*0
kwonlyargcount
builtins.int"builtins.int*)
nlocals
builtins.int"builtins.int*+
	stacksize
builtins.int"builtins.int*'
flags
builtins.int"builtins.int*0

codestring 
builtins.bytes"builtins.bytes*=
	constants.
builtins.tuple[Any]
Any"builtins.tuple*W
namesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple*Z
varnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple**
filename
builtins.str"builtins.str*&
name
builtins.str"builtins.str*-
firstlineno
builtins.int"builtins.int*,
lnotab 
builtins.bytes"builtins.bytes*\
freevarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *\
cellvarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple z38z39z310*‰
replacetypes.CodeType.replace" 
types.CodeType"types.CodeType**
self 
types.CodeType"types.CodeType*/
co_argcount
builtins.int"builtins.int *6
co_posonlyargcount
builtins.int"builtins.int *5
co_kwonlyargcount
builtins.int"builtins.int *.

co_nlocals
builtins.int"builtins.int *0
co_stacksize
builtins.int"builtins.int *,
co_flags
builtins.int"builtins.int *2
co_firstlineno
builtins.int"builtins.int */
co_code 
builtins.bytes"builtins.bytes *?
	co_consts.
builtins.tuple[Any]
Any"builtins.tuple *\
co_namesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *_
co_varnamesL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *_
co_freevarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple *_
co_cellvarsL
builtins.tuple[builtins.str]
builtins.str"builtins.str"builtins.tuple */
co_filename
builtins.str"builtins.str *+
co_name
builtins.str"builtins.str *1
	co_lnotab 
builtins.bytes"builtins.bytes z38z39z310j27j35j36j37j38j39j310ú&
IO	typing.IO"typing.Iterator*£
modetyping.IO.mode"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27z35z36z37z38z39z310*£
nametyping.IO.name"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27z35z36z37z38z39z310*ó
closetyping.IO.close"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*©
closedtyping.IO.closed"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27z35z36z37z38z39z310*≠
filenotyping.IO.fileno"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*ó
flushtyping.IO.flush"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*Ø
isattytyping.IO.isatty"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*≈
readtyping.IO.read"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*%
n
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*≥
readabletyping.IO.readable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*—
readlinetyping.IO.readline"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*)
limit
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*Å
	readlinestyping.IO.readlines"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
hint
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*ˇ
seektyping.IO.seek"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*≥
seekabletyping.IO.seekable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*©
telltyping.IO.tell"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*É
truncatetyping.IO.truncate"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:abstractmethod@z27z35z36z37z38z39z310*≥
writabletyping.IO.writable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*≈
writetyping.IO.write"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
s
typing.AnyStr0:abstractmethod@z27z35z36z37z38z39z310*Ú

writelinestyping.IO.writelines"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*O
linesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable0:abstractmethod@z27z35z36z37z38z39z310*Ö
nexttyping.IO.next"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*◊
__iter__typing.IO.__iter__"D
typing.Iterator[typing.AnyStr]
typing.AnyStr"typing.Iterator*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*Õ
	__enter__typing.IO.__enter__"8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*¬
__exit__typing.IO.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*ê
tä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*k
valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*f
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None0:abstractmethod@z27z35z36z37z38z39z310*¢
__next__typing.IO.__next__"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310Pj27j35j36j37j38j39j310¶
	Containertyping.Container"builtins.object*‹
__contains__typing.Container.__contains__"
builtins.bool"builtins.bool*L
selfD
typing.Container[typing._T_co]
typing._T_co"typing.Container*'
x"
builtins.object"builtins.object0:abstractmethod@z27*Û
__contains__typing.Container.__contains__"
builtins.bool"builtins.bool*L
selfD
typing.Container[typing._T_co]
typing._T_co"typing.Container*)
__x"
builtins.object"builtins.object0:abstractmethod@z35z36z37z38z39z3108PXj27j35j36j37j38j39j310∑
Iterabletyping.Iterable"builtins.object*Â
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@z27z35z36z37z38z39z3108PXj27j35j36j37j38j39j310â
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310π
Modulemodulefinder.Module"builtins.object*—
__init__modulefinder.Module.__init__"
None*4
self*
modulefinder.Module"modulefinder.Module*&
name
builtins.str"builtins.str*P
fileD
Union[builtins.str,None]
builtins.str"builtins.str
None *P
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None z27z35z36z37z38z39z310*ó
__repr__modulefinder.Module.__repr__"
builtins.str"builtins.str*2
self*
modulefinder.Module"modulefinder.Modulez27z35z36z37z38z39z310j27j35j36j37j38j39j310˘B
ModuleFindermodulefinder.ModuleFinder"builtins.object*Á
__init__"modulefinder.ModuleFinder.__init__"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*é
pathÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *)
debug
builtins.int"builtins.int *`
excludesP
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container *º
replace_paths¶
1typing.Sequence[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Sequence z27z35z36z37*Ó
__init__"modulefinder.ModuleFinder.__init__"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*é
pathÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *)
debug
builtins.int"builtins.int *õ
excludesä
*Union[typing.Container[builtins.str],None]P
typing.Container[builtins.str]
builtins.str"builtins.str"typing.Container
None *ä
replace_pathsÙ
=Union[typing.Sequence[Tuple[builtins.str,builtins.str]],None]¶
1typing.Sequence[Tuple[builtins.str,builtins.str]]`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.Sequence
None z38z39z310*
msgmodulefinder.ModuleFinder.msg"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*'
level
builtins.int"builtins.int*%
str
builtins.str"builtins.str*
args
Anyz27z35z36z37z38z39z310*§
msginmodulefinder.ModuleFinder.msgin"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*
args
Anyz27z35z36z37z38z39z310*¶
msgout modulefinder.ModuleFinder.msgout"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*
args
Anyz27z35z36z37z38z39z310*«

run_script$modulefinder.ModuleFinder.run_script"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder**
pathname
builtins.str"builtins.strz27z35z36z37z38z39z310*≈
	load_file#modulefinder.ModuleFinder.load_file"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder**
pathname
builtins.str"builtins.strz27z35z36z37z38z39z310*ø
import_hook%modulefinder.ModuleFinder.import_hook"Y
Union[modulefinder.Module,None]*
modulefinder.Module"modulefinder.Module
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*&
name
builtins.str"builtins.str*g
callerY
Union[modulefinder.Module,None]*
modulefinder.Module"modulefinder.Module
None *í
fromlistÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *)
level
builtins.int"builtins.int z27z35z36z37z38z39z310*ä
determine_parent*modulefinder.ModuleFinder.determine_parent"Y
Union[modulefinder.Module,None]*
modulefinder.Module"modulefinder.Module
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*e
callerY
Union[modulefinder.Module,None]*
modulefinder.Module"modulefinder.Module
None*)
level
builtins.int"builtins.int z27z35z36z37z38z39z310*ˆ
find_head_package+modulefinder.ModuleFinder.find_head_package"u
'Tuple[modulefinder.Module,builtins.str]*
modulefinder.Module"modulefinder.Module
builtins.str"builtins.str*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*6
parent*
modulefinder.Module"modulefinder.Module*&
name
builtins.str"builtins.strz27z35z36z37z38z39z310*ñ
	load_tail#modulefinder.ModuleFinder.load_tail"*
modulefinder.Module"modulefinder.Module*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*1
q*
modulefinder.Module"modulefinder.Module*&
tail
builtins.str"builtins.strz27z35z36z37z38z39z310*Â
ensure_fromlist)modulefinder.ModuleFinder.ensure_fromlist"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*1
m*
modulefinder.Module"modulefinder.Module*\
fromlistN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*-
	recursive
builtins.int"builtins.int z27z35z36z37z38z39z310*¶
find_all_submodules-modulefinder.ModuleFinder.find_all_submodules"N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*1
m*
modulefinder.Module"modulefinder.Modulez27z35z36z37z38z39z310*Ä
import_module'modulefinder.ModuleFinder.import_module"Y
Union[modulefinder.Module,None]*
modulefinder.Module"modulefinder.Module
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder**
partname
builtins.str"builtins.str*(
fqname
builtins.str"builtins.str*6
parent*
modulefinder.Module"modulefinder.Modulez27z35z36z37z38z39z310*ˇ
load_module%modulefinder.ModuleFinder.load_module"*
modulefinder.Module"modulefinder.Module*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*(
fqname
builtins.str"builtins.str*J
fpB
typing.IO[builtins.str]
builtins.str"builtins.str"	typing.IO**
pathname
builtins.str"builtins.str*õ
	file_infoã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.strz27z35z36z37z38z39z310*ˆ
	scan_code#modulefinder.ModuleFinder.scan_code"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*(
co 
types.CodeType"types.CodeType*1
m*
modulefinder.Module"modulefinder.Modulez27z35z36z37z38z39z310*ó
load_package&modulefinder.ModuleFinder.load_package"*
modulefinder.Module"modulefinder.Module*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*(
fqname
builtins.str"builtins.str**
pathname
builtins.str"builtins.strz27z35z36z37z38z39z310*Á

add_module$modulefinder.ModuleFinder.add_module"*
modulefinder.Module"modulefinder.Module*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*(
fqname
builtins.str"builtins.strz27z35z36z37z38z39z310*á
find_module%modulefinder.ModuleFinder.find_module"ê
hTuple[Union[typing.IO[Any],None],Union[builtins.str,None],Tuple[builtins.str,builtins.str,builtins.int]]N
Union[typing.IO[Any],None]$
typing.IO[Any]
Any"	typing.IO
NoneD
Union[builtins.str,None]
builtins.str"builtins.str
Noneã
-Tuple[builtins.str,builtins.str,builtins.int]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.int"builtins.int*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*&
name
builtins.str"builtins.str*N
pathD
Union[builtins.str,None]
builtins.str"builtins.str
None*g
parentY
Union[modulefinder.Module,None]*
modulefinder.Module"modulefinder.Module
None z27z35z36z37z38z39z310*ì
report modulefinder.ModuleFinder.report"
None*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinderz27z35z36z37z38z39z310*ﬂ
any_missing%modulefinder.ModuleFinder.any_missing"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinderz27z35z36z37z38z39z310*¸
any_missing_maybe+modulefinder.ModuleFinder.any_missing_maybe"⁄
>Tuple[builtins.list[builtins.str],builtins.list[builtins.str]]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinderz27z35z36z37z38z39z310*Û
replace_paths_in_code/modulefinder.ModuleFinder.replace_paths_in_code" 
types.CodeType"types.CodeType*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*(
co 
types.CodeType"types.CodeTypez27z35z36z37z38z39z310*Ñ
scan_opcodes&modulefinder.ModuleFinder.scan_opcodes"∆
8typing.Iterator[Tuple[builtins.str,builtins.tuple[Any]]]y
'Tuple[builtins.str,builtins.tuple[Any]]
builtins.str"builtins.str.
builtins.tuple[Any]
Any"builtins.tuple"typing.Iterator*@
self6
modulefinder.ModuleFinder"modulefinder.ModuleFinder*(
co 
types.CodeType"types.CodeTypez35z36z37z38z39z310j27j35j36j37j38j39j310œ
Iteratortyping.Iterator"typing.Iterable*±
__next__typing.Iterator.__next__"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@z35z36z37z38z39z310*Õ
__iter__typing.Iterator.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iteratorz35z36z37z38z39z3108PXj35j36j37j38j39j310´
AddPackagePathmodulefinder.AddPackagePath"
None*-
packagename
builtins.str"builtins.str*&
path
builtins.str"builtins.strz27z35z36z37z38z39z310™
ReplacePackagemodulefinder.ReplacePackage"
None*)
oldname
builtins.str"builtins.str*)
newname
builtins.str"builtins.strz27z35z36z37z38z39z310*R
Any
typing.Any"
builtins.object"builtins.object"27"35"36"37"38"39"310*d
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310*^
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm"27"35"36"37"38"39"310*`

LOAD_CONSTmodulefinder.LOAD_CONST
builtins.int"builtins.int"27"35"36"37"38"39"310*b
IMPORT_NAMEmodulefinder.IMPORT_NAME
builtins.int"builtins.int"27"35"36"37"38"39"310*`

STORE_NAMEmodulefinder.STORE_NAME
builtins.int"builtins.int"27"35"36"37"38"39"310*d
STORE_GLOBALmodulefinder.STORE_GLOBAL
builtins.int"builtins.int"27"35"36"37"38"39"310*¢
	STORE_OPSmodulefinder.STORE_OPS`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"27"35"36"37"38"39"310*d
EXTENDED_ARGmodulefinder.EXTENDED_ARG
builtins.int"builtins.int"27"35"36"37"38"39"310*ˇ
packagePathMapmodulefinder.packagePathMap≤
7builtins.dict[builtins.str,builtins.list[builtins.str]]
builtins.str"builtins.strJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"builtins.dict"27"35"36"37"38"39"310*«
replacePackageMapmodulefinder.replacePackageMapu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict"27"35"36"37"38"39"310