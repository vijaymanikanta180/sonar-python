
numbersÅ
ABCMetaabc.ABCMeta"builtins.type*Ÿ
__init__abc.ABCMeta.__init__"
None*$
self
abc.ABCMeta"abc.ABCMeta*&
name
builtins.str"builtins.str*Z
basesO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*f
	namespaceW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictz27z35z36z37z38z39z310*î
__instancecheck__abc.ABCMeta.__instancecheck__"
Any*#
cls
abc.ABCMeta"abc.ABCMeta*
instance
Anyz27z35z36z37z38z39z310*î
__subclasscheck__abc.ABCMeta.__subclasscheck__"
Any*#
cls
abc.ABCMeta"abc.ABCMeta*
subclass
Anyz27z35z36z37z38z39z310*Ê
_dump_registryabc.ABCMeta._dump_registry"
None*#
cls
abc.ABCMeta"abc.ABCMeta*Ñ
filex
(Union[_typeshed.SupportsWrite[Any],None]@
_typeshed.SupportsWrite[Any]
Any"_typeshed.SupportsWrite
None z27*£
_dump_registryabc.ABCMeta._dump_registry"
None*#
cls
abc.ABCMeta"abc.ABCMeta*¨
fileü
1Union[_typeshed.SupportsWrite[builtins.str],None]^
%_typeshed.SupportsWrite[builtins.str]
builtins.str"builtins.str"_typeshed.SupportsWrite
None z35z36z37z38z39z310*y
registerabc.ABCMeta.register"
None*#
cls
abc.ABCMeta"abc.ABCMeta*$
subclass
	Type[Any]
Anyz27*®
registerabc.ABCMeta.register"
Type[abc._T]

abc._T*#
cls
abc.ABCMeta"abc.ABCMeta**
subclass
Type[abc._T]

abc._Tz35z36z37z38z39z310j27j35j36j37j38j39j310ù
SupportsFloattyping.SupportsFloat"builtins.object*¥
	__float__typing.SupportsFloat.__float__" 
builtins.float"builtins.float*4
self,
typing.SupportsFloat"typing.SupportsFloat0:abstractmethod@z27z35z36z37z38z39z3108@Xbabc.ABCMetaj27j35j36j37j38j39j310ˆ
Numbernumbers.Number"builtins.object*û
__hash__numbers.Number.__hash__"
builtins.int"builtins.int**
self 
numbers.Number"numbers.Number0:abstractmethod@z27z35z36z37z38z39z310@babc.ABCMetaj27j35j36j37j38j39j310¢
Complexnumbers.Complex"numbers.Number*≠
__complex__numbers.Complex.__complex__"$
builtins.complex"builtins.complex**
self"
numbers.Complex"numbers.Complex0:abstractmethod@z27z35z36z37z38z39z310*z
__nonzero__numbers.Complex.__nonzero__"
builtins.bool"builtins.bool**
self"
numbers.Complex"numbers.Complexz27*ê
realnumbers.Complex.real"
Any*,
self"
numbers.Complex"numbers.Complex0:property:abstractmethod@`z27z35z36z37z38z39z310*ê
imagnumbers.Complex.imag"
Any*,
self"
numbers.Complex"numbers.Complex0:property:abstractmethod@`z27z35z36z37z38z39z310*ö
__add__numbers.Complex.__add__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ú
__radd__numbers.Complex.__radd__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*à
__neg__numbers.Complex.__neg__"
Any**
self"
numbers.Complex"numbers.Complex0:abstractmethod@z27z35z36z37z38z39z310*à
__pos__numbers.Complex.__pos__"
Any**
self"
numbers.Complex"numbers.Complex0:abstractmethod@z27z35z36z37z38z39z310*Ü
__sub__numbers.Complex.__sub__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Anyz27z35z36z37z38z39z310*à
__rsub__numbers.Complex.__rsub__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Anyz27z35z36z37z38z39z310*ö
__mul__numbers.Complex.__mul__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ú
__rmul__numbers.Complex.__rmul__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*O
__div__numbers.Complex.__div__*
self*	
other0:abstractmethod@z27*Q
__rdiv__numbers.Complex.__rdiv__*
self*	
other0:abstractmethod@z27*¢
__truediv__numbers.Complex.__truediv__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*§
__rtruediv__numbers.Complex.__rtruediv__"
Any**
self"
numbers.Complex"numbers.Complex*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ù
__pow__numbers.Complex.__pow__"
Any**
self"
numbers.Complex"numbers.Complex*
exponent
Any0:abstractmethod@z27z35z36z37z38z39z310*õ
__rpow__numbers.Complex.__rpow__"
Any**
self"
numbers.Complex"numbers.Complex*
base
Any0:abstractmethod@z27z35z36z37z38z39z310*â
__abs__numbers.Complex.__abs__"
numbers.Real"numbers.Real**
self"
numbers.Complex"numbers.Complexz27z35z36z37z38z39z310*z
	conjugatenumbers.Complex.conjugate"
Any*,
self"
numbers.Complex"numbers.Complexz27z35z36z37z38z39z310*õ
__eq__numbers.Complex.__eq__"
builtins.bool"builtins.bool**
self"
numbers.Complex"numbers.Complex*
other
Anyz27z35z36z37z38z39z310*Ç
__ne__numbers.Complex.__ne__"
builtins.bool"builtins.bool**
self"
numbers.Complex"numbers.Complex*
other
Anyz27*ã
__bool__numbers.Complex.__bool__"
builtins.bool"builtins.bool*,
self"
numbers.Complex"numbers.Complexz35z36z37z38z39z310j27j35j36j37j38j39j310¥
Realnumbers.Real"numbers.Complex"typing.SupportsFloat*ú
	__float__numbers.Real.__float__" 
builtins.float"builtins.float*$
self
numbers.Real"numbers.Real0:abstractmethod@z27z35z36z37z38z39z310*ö
	__trunc__numbers.Real.__trunc__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@z27z35z36z37z38z39z310*É

__divmod__numbers.Real.__divmod__"
Any*$
self
numbers.Real"numbers.Real*
other
Anyz27z35z36z37z38z39z310*â
__rdivmod__numbers.Real.__rdivmod__"
Any*&
self
numbers.Real"numbers.Real*
other
Anyz27z35z36z37z38z39z310*∞
__floordiv__numbers.Real.__floordiv__"
builtins.int"builtins.int*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*≤
__rfloordiv__numbers.Real.__rfloordiv__"
builtins.int"builtins.int*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ë
__mod__numbers.Real.__mod__"
Any*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ì
__rmod__numbers.Real.__rmod__"
Any*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*¶
__lt__numbers.Real.__lt__"
builtins.bool"builtins.bool*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*¶
__le__numbers.Real.__le__"
builtins.bool"builtins.bool*$
self
numbers.Real"numbers.Real*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ê
__complex__numbers.Real.__complex__"$
builtins.complex"builtins.complex*$
self
numbers.Real"numbers.Realz27z35z36z37z38z39z310*u
realnumbers.Real.real"
Any*&
self
numbers.Real"numbers.Real0:property`z27z35z36z37z38z39z310*u
imagnumbers.Real.imag"
Any*&
self
numbers.Real"numbers.Real0:property`z27z35z36z37z38z39z310*q
	conjugatenumbers.Real.conjugate"
Any*&
self
numbers.Real"numbers.Realz27z35z36z37z38z39z310*ñ
	__floor__numbers.Real.__floor__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@z35z36z37z38z39z310*î
__ceil__numbers.Real.__ceil__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real0:abstractmethod@z35z36z37z38z39z3102É
	__round__numbers.Real.__round__¢
	__round__numbers.Real.__round__"
builtins.int"builtins.int*&
self
numbers.Real"numbers.Real*
ndigits
None 0:abstractmethod:overload@Xü
	__round__numbers.Real.__round__"
Any*&
self
numbers.Real"numbers.Real*)
ndigits
builtins.int"builtins.int0:abstractmethod:overload@X"35"36"37"38"39"310j27j35j36j37j38j39j310Ã
Rationalnumbers.Rational"numbers.Real*≤
	numeratornumbers.Rational.numerator"
builtins.int"builtins.int*.
self$
numbers.Rational"numbers.Rational0:property:abstractmethod@`z27z35z36z37z38z39z310*∂
denominatornumbers.Rational.denominator"
builtins.int"builtins.int*.
self$
numbers.Rational"numbers.Rational0:property:abstractmethod@`z27z35z36z37z38z39z310*î
	__float__numbers.Rational.__float__" 
builtins.float"builtins.float*,
self$
numbers.Rational"numbers.Rationalz27z35z36z37z38z39z310j27j35j36j37j38j39j310∂
Integralnumbers.Integral"numbers.Rational*â
__long__numbers.Integral.__long__"
builtins.int"builtins.int*,
self$
numbers.Integral"numbers.Integral0:abstractmethod@z27*í
	__index__numbers.Integral.__index__"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integralz27z35z36z37z38z39z310*’
__pow__numbers.Integral.__pow__"
Any*,
self$
numbers.Integral"numbers.Integral*
exponent
Any*3
modulus&
Union[Any,None]
Any
None 0:abstractmethod@z27z35z36z37z38z39z310*£

__lshift__numbers.Integral.__lshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*•
__rlshift__numbers.Integral.__rlshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*£

__rshift__numbers.Integral.__rshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*•
__rrshift__numbers.Integral.__rrshift__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ù
__and__numbers.Integral.__and__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ü
__rand__numbers.Integral.__rand__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ù
__xor__numbers.Integral.__xor__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ü
__rxor__numbers.Integral.__rxor__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*õ
__or__numbers.Integral.__or__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ù
__ror__numbers.Integral.__ror__"
Any*,
self$
numbers.Integral"numbers.Integral*
other
Any0:abstractmethod@z27z35z36z37z38z39z310*ë

__invert__numbers.Integral.__invert__"
Any*,
self$
numbers.Integral"numbers.Integral0:abstractmethod@z27z35z36z37z38z39z310*î
	__float__numbers.Integral.__float__" 
builtins.float"builtins.float*,
self$
numbers.Integral"numbers.Integralz27z35z36z37z38z39z310*†
	numeratornumbers.Integral.numerator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:property`z27z35z36z37z38z39z310*§
denominatornumbers.Integral.denominator"
builtins.int"builtins.int*.
self$
numbers.Integral"numbers.Integral0:property`z27z35z36z37z38z39z310*ú
__int__numbers.Integral.__int__"
builtins.int"builtins.int*,
self$
numbers.Integral"numbers.Integral0:abstractmethod@z35z36z37z38z39z310j27j35j36j37j38j39j310n
abstractmethodabc.abstractmethod"

abc._FuncT*
funcobj

abc._FuncTz27z35z36z37z38z39z310\
overloadtyping.overload"
	typing._F*
func
	typing._Fz35z36z37z38z39z310*R
Any
typing.Any"
builtins.object"builtins.object*27*35*36*37*38*39*310*d
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310