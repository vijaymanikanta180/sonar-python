
opcodeâ
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310 
stack_effectopcode.stack_effect"
builtins.int"builtins.int*(
__opcode
builtins.int"builtins.int*Q
__opargD
Union[builtins.int,None]
builtins.int"builtins.int
None z35z36z37†
stack_effectopcode.stack_effect"
builtins.int"builtins.int*(
__opcode
builtins.int"builtins.int*Q
__opargD
Union[builtins.int,None]
builtins.int"builtins.int
None *S
jumpG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None z38z39z310*Ñ
cmp_opopcode.cmp_opN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*27*35*36*37*38*39*310*Ñ
hasconstopcode.hasconstJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*Ç
hasnameopcode.hasnameJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*Ç
hasjrelopcode.hasjrelJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*Ç
hasjabsopcode.hasjabsJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*Ñ
haslocalopcode.haslocalJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*à

hascompareopcode.hascompareJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*Ç
hasfreeopcode.hasfreeJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*27*35*36*37*38*39*310*Ä
opnameopcode.opnameJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*27*35*36*37*38*39*310*©
opmapopcode.opmapu
(builtins.dict[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int"builtins.dict*27*35*36*37*38*39*310*`
HAVE_ARGUMENTopcode.HAVE_ARGUMENT
builtins.int"builtins.int*27*35*36*37*38*39*310*^
EXTENDED_ARGopcode.EXTENDED_ARG
builtins.int"builtins.int*27*35*36*37*38*39*310*%
syssys *35*36*37*38*39*310*`
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*Ä
hasnargsopcode.hasnargsJ
builtins.list[builtins.int]
builtins.int"builtins.int"builtins.list*35*36*37*38*39*310