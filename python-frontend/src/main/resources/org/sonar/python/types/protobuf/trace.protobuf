
traceÉ
Mappingtyping.Mapping"typing.Iterable"typing.Container*–
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@z27*ƒ
keystyping.Mapping.keys":
builtins.list[typing._KT]

typing._KT"builtins.list*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*Œ
valuestyping.Mapping.values"@
builtins.list[typing._VT_co]
typing._VT_co"builtins.list*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*î
itemstyping.Mapping.items"á
.builtins.list[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"builtins.list*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*–
iterkeystyping.Mapping.iterkeys">
typing.Iterator[typing._KT]

typing._KT"typing.Iterator*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*⁄

itervaluestyping.Mapping.itervalues"D
typing.Iterator[typing._VT_co]
typing._VT_co"typing.Iterator*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*†
	iteritemstyping.Mapping.iteritems"ã
0typing.Iterator[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Iterator*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*ﬂ
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.objectz27*æ
__len__typing.Mapping.__len__"
builtins.int"builtins.int*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping0:abstractmethod@z272∆
gettyping.Mapping.get„
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:overloadX¿
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadX"27Pj27í
Mappingtyping.Mapping"typing.Collection*Â
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@z35z36z37z38z39z310*≥
itemstyping.Mapping.items"ë
3typing.AbstractSet[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*„
keystyping.Mapping.keys"D
typing.AbstractSet[typing._KT]

typing._KT"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Î
valuestyping.Mapping.values"H
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Ù
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.objectz35z36z37z38z39z3102ﬂ
gettyping.Mapping.getÂ
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT0:overloadX¬
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadX"35"36"37"38"39"310Pj35j36j37j38j39j310â
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310…
TypeVartyping.TypeVar"builtins.object*ﬁ
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*H
bound;
Union[Type[Any],None]
	Type[Any]
Any
None */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z27*û
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z35z36z37z38z39z310j27j35j36j37j38j39j310•:
CoverageResultstrace.CoverageResults"builtins.object*◊
__init__trace.CoverageResults.__init__"
None*8
self.
trace.CoverageResults"trace.CoverageResults*µ
counts¶
HUnion[builtins.dict[Tuple[builtins.str,builtins.int],builtins.int],None]Õ
<builtins.dict[Tuple[builtins.str,builtins.int],builtins.int]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict
None *»
calledfuncs¥
lUnion[builtins.dict[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],builtins.int],None]∑
`builtins.dict[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],builtins.int]•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction
builtins.int"builtins.int"builtins.dict
None *^
infileP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *û	
callersé	
∏Union[builtins.dict[Tuple[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]],builtins.int],None]ƒ
¨builtins.dict[Tuple[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]],builtins.int]Â
êTuple[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]]•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction
builtins.int"builtins.int"builtins.dict
None *_
outfileP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None z27*ú
__init__trace.CoverageResults.__init__"
None*8
self.
trace.CoverageResults"trace.CoverageResults*µ
counts¶
HUnion[builtins.dict[Tuple[builtins.str,builtins.int],builtins.int],None]Õ
<builtins.dict[Tuple[builtins.str,builtins.int],builtins.int]`
 Tuple[builtins.str,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int"builtins.dict
None *»
calledfuncs¥
lUnion[builtins.dict[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],builtins.int],None]∑
`builtins.dict[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],builtins.int]•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction
builtins.int"builtins.int"builtins.dict
None *µ
infile¶
2Union[builtins.str,os.PathLike[builtins.str],None]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike
None *û	
callersé	
∏Union[builtins.dict[Tuple[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]],builtins.int],None]ƒ
¨builtins.dict[Tuple[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]],builtins.int]Â
êTuple[TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]],TypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]]•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction
builtins.int"builtins.int"builtins.dict
None *∂
outfile¶
2Union[builtins.str,os.PathLike[builtins.str],None]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike
None z35z36z37z38z39z310*¬
updatetrace.CoverageResults.update"
None*8
self.
trace.CoverageResults"trace.CoverageResults*9
other.
trace.CoverageResults"trace.CoverageResultsz27z35z36z37z38z39z310*¡
write_results#trace.CoverageResults.write_results"
None*8
self.
trace.CoverageResults"trace.CoverageResults*2
show_missing
builtins.bool"builtins.bool *-
summary
builtins.bool"builtins.bool *`
coverdirP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None z27*Æ
write_results#trace.CoverageResults.write_results"
None*8
self.
trace.CoverageResults"trace.CoverageResults*2
show_missing
builtins.bool"builtins.bool *-
summary
builtins.bool"builtins.bool *∑
coverdir¶
2Union[builtins.str,os.PathLike[builtins.str],None]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike
None z35z36z37z38z39z310*›
write_results_file(trace.CoverageResults.write_results_file"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*8
self.
trace.CoverageResults"trace.CoverageResults*.
path$
builtins.unicode"builtins.unicode*Y
linesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*
lnotab
Any*Ü
	lines_hitw
)typing.Mapping[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Mapping*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*π
write_results_file(trace.CoverageResults.write_results_file"`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*8
self.
trace.CoverageResults"trace.CoverageResults*Ù
pathÈ
8TypeAlias[Union[builtins.str,os.PathLike[builtins.str]]]ó
-Union[builtins.str,os.PathLike[builtins.str]]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike"_typeshed.StrPath*Y
linesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*
lnotab
Any*Ü
	lines_hitw
)typing.Mapping[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"typing.Mapping*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310j27j35j36j37j38j39j310õ(
Tracetrace.Trace"builtins.object*ø
__init__trace.Trace.__init__"
None*$
self
trace.Trace"trace.Trace*)
count
builtins.int"builtins.int *)
trace
builtins.int"builtins.int *.

countfuncs
builtins.int"builtins.int *0
countcallers
builtins.int"builtins.int *`

ignoremodsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *`

ignoredirsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *^
infileP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *_
outfileP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None *,
timing
builtins.bool"builtins.bool z27*Ñ
__init__trace.Trace.__init__"
None*$
self
trace.Trace"trace.Trace*)
count
builtins.int"builtins.int *)
trace
builtins.int"builtins.int *.

countfuncs
builtins.int"builtins.int *0
countcallers
builtins.int"builtins.int *`

ignoremodsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *`

ignoredirsN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *µ
infile¶
2Union[builtins.str,os.PathLike[builtins.str],None]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike
None *∂
outfile¶
2Union[builtins.str,os.PathLike[builtins.str],None]
builtins.str"builtins.strF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLike
None *,
timing
builtins.bool"builtins.bool z35z36z37z38z39z310*‘
runtrace.Trace.run"
None*$
self
trace.Trace"trace.Trace*o
cmdf
"Union[builtins.str,types.CodeType]
builtins.str"builtins.str 
types.CodeType"types.CodeTypez27z35z36z37z38z39z310*©
runctxtrace.Trace.runctx"
None*$
self
trace.Trace"trace.Trace*o
cmdf
"Union[builtins.str,types.CodeType]
builtins.str"builtins.str 
types.CodeType"types.CodeType*•
globalsï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None *§
localsï
,Union[typing.Mapping[builtins.str,Any],None]Y
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mapping
None z27z35z36z37z38z39z310*Í
runfunctrace.Trace.runfunc"
trace._T*$
self
trace.Trace"trace.Trace*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kw
Anyz27z35z36z37z38z39z310*ÿ
file_module_function_of#trace.Trace.file_module_function_of"•
DTypeAlias[Tuple[builtins.str,Union[builtins.str,None],builtins.str]]ø
9Tuple[builtins.str,Union[builtins.str,None],builtins.str]
builtins.str"builtins.strD
Union[builtins.str,None]
builtins.str"builtins.str
None
builtins.str"builtins.str"trace._fileModuleFunction*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameTypez27z35z36z37z38z39z310*ı
globaltrace_trackcallers$trace.Trace.globaltrace_trackcallers"
None*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameType*%
why
builtins.str"builtins.str*
arg
Anyz27z35z36z37z38z39z310*Ò
globaltrace_countfuncs"trace.Trace.globaltrace_countfuncs"
None*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameType*%
why
builtins.str"builtins.str*
arg
Anyz27z35z36z37z38z39z310*·
globaltrace_lttrace.Trace.globaltrace_lt"
None*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameType*%
why
builtins.str"builtins.str*
arg
Anyz27z35z36z37z38z39z310*Ä
localtrace_trace_and_count&trace.Trace.localtrace_trace_and_count"é
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"trace._localtrace*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameType*%
why
builtins.str"builtins.str*
arg
Anyz27z35z36z37z38z39z310*Ï
localtrace_tracetrace.Trace.localtrace_trace"é
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"trace._localtrace*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameType*%
why
builtins.str"builtins.str*
arg
Anyz27z35z36z37z38z39z310*Ï
localtrace_counttrace.Trace.localtrace_count"é
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"trace._localtrace*$
self
trace.Trace"trace.Trace*-
frame"
types.FrameType"types.FrameType*%
why
builtins.str"builtins.str*
arg
Anyz27z35z36z37z38z39z310*ë
resultstrace.Trace.results".
trace.CoverageResults"trace.CoverageResults*$
self
trace.Trace"trace.Tracez27z35z36z37z38z39z310j27j35j36j37j38j39j310*-
typestypes *27*35*36*37*38*39*310*R
Any
typing.Any"
builtins.object"builtins.object*27*35*36*37*38*39*310*d
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*d
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*^
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*^
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310