
unittest.async_case÷
	Awaitabletyping.Awaitable"builtins.object*Ü
	__await__typing.Awaitable.__await__"`
'typing.Generator[Any,None,typing._T_co]
Any
None
typing._T_co"typing.Generator*N
selfD
typing.Awaitable[typing._T_co]
typing._T_co"typing.Awaitable0:abstractmethod@z35z36z37z38z39z3108PXj35j36j37j38j39j310¸ﬂ
TestCaseunittest.case.TestCase"builtins.object*∫
__init__unittest.case.TestCase.__init__"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*.

methodName
builtins.str"builtins.str z35z36z37z38z39z310*Ñ
setUpunittest.case.TestCase.setUp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*ä
tearDownunittest.case.TestCase.tearDown"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*¿

setUpClass!unittest.case.TestCase.setUpClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz35z36z37z38z39z310*∆
tearDownClass$unittest.case.TestCase.tearDownClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz35z36z37z38z39z310*‰
rununittest.case.TestCase.run"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z35z36z37z38z39z310*Ó
__call__unittest.case.TestCase.__call__"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z35z36z37z38z39z310*ü
skipTestunittest.case.TestCase.skipTest"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
reason
Anyz35z36z37z38z39z310*Á
subTestunittest.case.TestCase.subTest">
typing.ContextManager[None]
None"typing.ContextManager*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any *
params
Anyz35z36z37z38z39z310*Ñ
debugunittest.case.TestCase.debug"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*ª
_addSkipunittest.case.TestCase._addSkip"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*D
result8
unittest.result.TestResult"unittest.result.TestResult*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*(
reason
builtins.str"builtins.strz35z36z37z38z39z310*Õ
assertEqual"unittest.case.TestCase.assertEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*”
assertNotEqual%unittest.case.TestCase.assertNotEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*µ

assertTrue!unittest.case.TestCase.assertTrue"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z35z36z37z38z39z310*∑
assertFalse"unittest.case.TestCase.assertFalse"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z35z36z37z38z39z310*∆
assertIsunittest.case.TestCase.assertIs"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr1
Any*
expr2
Any*
msg
Any z35z36z37z38z39z310*Ã
assertIsNot"unittest.case.TestCase.assertIsNot"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr1
Any*
expr2
Any*
msg
Any z35z36z37z38z39z310*∏
assertIsNone#unittest.case.TestCase.assertIsNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*
msg
Any z35z36z37z38z39z310*æ
assertIsNotNone&unittest.case.TestCase.assertIsNotNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*
msg
Any z35z36z37z38z39z310*·
assertInunittest.case.TestCase.assertIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z35z36z37z38z39z310*Á
assertNotIn"unittest.case.TestCase.assertNotIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z35z36z37z38z39z310*Ù
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
msg
Any z35z36z37z38z39z310*˙
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
msg
Any z35z36z37z38z39z310*»
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*“
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*¬

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*Ã
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*Œ

assertLogs!unittest.case.TestCase.assertLogs"D
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z35z36z37z38z39z310*Ê
assertRegex"unittest.case.TestCase.assertRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*¢
expected_regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*Ó
assertNotRegex%unittest.case.TestCase.assertNotRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*§
unexpected_regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*©
assertCountEqual'unittest.case.TestCase.assertCountEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*;
first0
typing.Iterable[Any]
Any"typing.Iterable*<
second0
typing.Iterable[Any]
Any"typing.Iterable*
msg
Any z35z36z37z38z39z310*†
addTypeEqualityFunc*unittest.case.TestCase.addTypeEqualityFunc"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*#
typeobj
	Type[Any]
Any*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.functionz35z36z37z38z39z310*â
assertMultiLineEqual+unittest.case.TestCase.assertMultiLineEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*'
first
builtins.str"builtins.str*(
second
builtins.str"builtins.str*
msg
Any z35z36z37z38z39z310*∆
assertSequenceEqual*unittest.case.TestCase.assertSequenceEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
seq10
typing.Sequence[Any]
Any"typing.Sequence*:
seq20
typing.Sequence[Any]
Any"typing.Sequence*
msg
Any *ó
seq_typeÜ
&Union[Type[typing.Sequence[Any]],None]P
Type[typing.Sequence[Any]]0
typing.Sequence[Any]
Any"typing.Sequence
None z35z36z37z38z39z310*û
assertListEqual&unittest.case.TestCase.assertListEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*7
list1,
builtins.list[Any]
Any"builtins.list*7
list2,
builtins.list[Any]
Any"builtins.list*
msg
Any z35z36z37z38z39z310*¶
assertTupleEqual'unittest.case.TestCase.assertTupleEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
tuple1.
builtins.tuple[Any]
Any"builtins.tuple*:
tuple2.
builtins.tuple[Any]
Any"builtins.tuple*
msg
Any z35z36z37z38z39z310*¸
assertSetEqual%unittest.case.TestCase.assertSetEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
set1]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*g
set2]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*
msg
Any z35z36z37z38z39z310*Ñ
assertDictEqual&unittest.case.TestCase.assertDictEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*j
d1b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*j
d2b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*
msg
Any z35z36z37z38z39z310*ö
failunittest.case.TestCase.fail"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any z35z36z37z38z39z310*™
countTestCases%unittest.case.TestCase.countTestCases"
builtins.int"builtins.int*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*Ã
defaultTestResult(unittest.case.TestCase.defaultTestResult"8
unittest.result.TestResult"unittest.result.TestResult*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*í
idunittest.case.TestCase.id"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*÷
shortDescription'unittest.case.TestCase.shortDescription"D
Union[builtins.str,None]
builtins.str"builtins.str
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*Ñ

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz35z36z37*Ö

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z39z310*é

doCleanups!unittest.case.TestCase.doCleanups"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*®
_formatMessage%unittest.case.TestCase._formatMessage"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCase*M
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*-
standardMsg
builtins.str"builtins.strz35z36z37z38z39z310*í
_getAssertEqualityFunc-unittest.case.TestCase._getAssertEqualityFunc"K
CallableType[builtins.function]&
builtins.function"builtins.function*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Anyz35z36z37z38z39z310*’
failUnlessEqual&unittest.case.TestCase.failUnlessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*œ
assertEquals#unittest.case.TestCase.assertEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*Õ
failIfEqual"unittest.case.TestCase.failIfEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*’
assertNotEquals&unittest.case.TestCase.assertNotEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*Ã

failUnless!unittest.case.TestCase.failUnless"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z39z310*∆
assert_unittest.case.TestCase.assert_"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z39z310*ƒ
failIfunittest.case.TestCase.failIf"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z39z310*ø
failUnlessAlmostEqual,unittest.case.TestCase.failUnlessAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any z35z36z37z38z39z310*Ë
assertAlmostEquals)unittest.case.TestCase.assertAlmostEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any *-
delta 
builtins.float"builtins.float z35z36z37z38z39z310*∑
failIfAlmostEqual(unittest.case.TestCase.failIfAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any z35z36z37z38z39z310*Ó
assertNotAlmostEquals,unittest.case.TestCase.assertNotAlmostEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any *-
delta 
builtins.float"builtins.float z35z36z37z38z39z310*Ì
assertRegexpMatches*unittest.case.TestCase.assertRegexpMatches"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ô
regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*Û
assertNotRegexpMatches-unittest.case.TestCase.assertNotRegexpMatches"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ô
regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*Ô
assertDictContainsSubset/unittest.case.TestCase.assertDictContainsSubset"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*G
subset;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*K

dictionary;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*-
msg"
builtins.object"builtins.object z35z36z37z38z39z310*¡
addClassCleanup&unittest.case.TestCase.addClassCleanup"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:classmethodpz38z39z310*æ
doClassCleanups&unittest.case.TestCase.doClassCleanups"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz38z39z3102∫	
assertRaises#unittest.case.TestCase.assertRaises„
assertRaises#unittest.case.TestCase.assertRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÖ
assertRaises#unittest.case.TestCase.assertRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39"3102ê
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex…
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÎ
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39"3102Ô
assertWarns"unittest.case.TestCase.assertWarns®
assertWarns"unittest.case.TestCase.assertWarns"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX˜
assertWarns"unittest.case.TestCase.assertWarns"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39"3102≈
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegexé
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX›
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39"3102Œ
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual≠
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *W
deltaJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:overloadX≈
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *c
deltaV
Union[datetime.timedelta,None](
datetime.timedelta"datetime.timedelta
None 0:overloadX"35"36"37"38"39"3102Ú
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqualÜ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any 0:overloadX⁄
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any 0:overloadXﬂ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *W
deltaJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:overloadXÀ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *c
deltaV
Union[datetime.timedelta,None](
datetime.timedelta"datetime.timedelta
None 0:overloadX"35"36"37"38"39"3102¬	
failUnlessRaises'unittest.case.TestCase.failUnlessRaises‰
failUnlessRaises'unittest.case.TestCase.failUnlessRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Õ
	exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*[
callableK
CallableType[builtins.function]&
builtins.function"builtins.function *
args
Any*
kwargs
Any0:overloadXÑ
failUnlessRaises'unittest.case.TestCase.failUnlessRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˆ
	exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39"3102Ñ
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp¬
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Õ
	exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX‰
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˆ
	exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39"310j35j36j37j38j39j310÷
IsolatedAsyncioTestCase+unittest.async_case.IsolatedAsyncioTestCase"unittest.case.TestCase*â

asyncSetUp6unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp"N
typing.Coroutine[Any,Any,None]
Any
Any
None"typing.Coroutine*d
selfZ
+unittest.async_case.IsolatedAsyncioTestCase"+unittest.async_case.IsolatedAsyncioTestCaseHz38z39z310*è
asyncTearDown9unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown"N
typing.Coroutine[Any,Any,None]
Any
Any
None"typing.Coroutine*d
selfZ
+unittest.async_case.IsolatedAsyncioTestCase"+unittest.async_case.IsolatedAsyncioTestCaseHz38z39z310* 
addAsyncCleanup;unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup"
None*d
selfZ
+unittest.async_case.IsolatedAsyncioTestCase"+unittest.async_case.IsolatedAsyncioTestCase*U
__funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z39z310j38j39j310*%
syssys *35*36*37*38*39*310*N
Any
typing.Any"
builtins.object"builtins.object*35*36*37*38*39*310*`
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310