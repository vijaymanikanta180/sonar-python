
unittest.mockØ
Iterabletyping.Iterable"builtins.object*·
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@z35z36z37z38z39z3108PXj35j36j37j38j39j310í
Mappingtyping.Mapping"typing.Collection*Â
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@z35z36z37z38z39z310*≥
itemstyping.Mapping.items"ë
3typing.AbstractSet[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*„
keystyping.Mapping.keys"D
typing.AbstractSet[typing._KT]

typing._KT"typing.AbstractSet*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Î
valuestyping.Mapping.values"H
 typing.ValuesView[typing._VT_co]
typing._VT_co"typing.ValuesView*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz35z36z37z38z39z310*Ù
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.objectz35z36z37z38z39z3102ﬂ
gettyping.Mapping.getÂ
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT0:overloadX¬
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
key

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadX"35"36"37"38"39"310Pj35j36j37j38j39j310¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310‰
TypeVartyping.TypeVar"builtins.object*û
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z35z36z37z38z39z310j35j36j37j38j39j310L
_slottedunittest.mock._slotted"builtins.objectj35j36j37j38j39j310è
_SentinelObjectunittest.mock._SentinelObject"builtins.object*≤
__init__&unittest.mock._SentinelObject.__init__"
None*H
self>
unittest.mock._SentinelObject"unittest.mock._SentinelObject*
name
Anyz35z36z37z38z39z310j35j36j37j38j39j310ó
	_Sentinelunittest.mock._Sentinel"builtins.object*ç
__init__ unittest.mock._Sentinel.__init__"
None*<
self2
unittest.mock._Sentinel"unittest.mock._Sentinelz35z36z37z38z39z310*∂
__getattr__#unittest.mock._Sentinel.__getattr__"
Any*:
self2
unittest.mock._Sentinel"unittest.mock._Sentinel*$
name
builtins.str"builtins.strz35z36z37z38z39z310j35j36j37j38j39j310˚
_Callunittest.mock._Call"builtins.tuple*¯
__new__unittest.mock._Call.__new__"
Any*R
clsI
Type[unittest.mock._Call]*
unittest.mock._Call"unittest.mock._Call*
value
Any *2
name&
Union[Any,None]
Any
None *4
parent&
Union[Any,None]
Any
None *)
two
builtins.bool"builtins.bool */
	from_kall
builtins.bool"builtins.bool z35z36z37z38z39z310*›
__init__unittest.mock._Call.__init__"
None*4
self*
unittest.mock._Call"unittest.mock._Call*
value
Any *2
name&
Union[Any,None]
Any
None *4
parent&
Union[Any,None]
Any
None *)
two
builtins.bool"builtins.bool */
	from_kall
builtins.bool"builtins.bool z35z36z37z38z39z310*£
__eq__unittest.mock._Call.__eq__"
builtins.bool"builtins.bool*2
self*
unittest.mock._Call"unittest.mock._Call*
other
Anyz35z36z37z38z39z310*À
__call__unittest.mock._Call.__call__"*
unittest.mock._Call"unittest.mock._Call*4
self*
unittest.mock._Call"unittest.mock._Call*
args
Any*
kwargs
Anyz35z36z37z38z39z310*ï
__getattr__unittest.mock._Call.__getattr__"
Any*2
self*
unittest.mock._Call"unittest.mock._Call*
attr
Anyz35z36z37z38z39z310*¢
countunittest.mock._Call.count"
Any*4
self*
unittest.mock._Call"unittest.mock._Call*
args
Any*
kwargs
Anyz35z36z37z38z39z310*¢
indexunittest.mock._Call.index"
Any*4
self*
unittest.mock._Call"unittest.mock._Call*
args
Any*
kwargs
Anyz35z36z37z38z39z310*Ç
	call_listunittest.mock._Call.call_list"
Any*4
self*
unittest.mock._Call"unittest.mock._Callz35z36z37z38z39z310j35j36j37j38j39j310ä
	_CallListunittest.mock._CallList"builtins.list*ª
__contains__$unittest.mock._CallList.__contains__"
builtins.bool"builtins.bool*:
self2
unittest.mock._CallList"unittest.mock._CallList*
value
Anyz35z36z37z38z39z310j35j36j37j38j39j310å
	_MockIterunittest.mock._MockIter"builtins.object*ü
__init__ unittest.mock._MockIter.__init__"
None*<
self2
unittest.mock._MockIter"unittest.mock._MockIter*
obj
Anyz35z36z37z38z39z310*ä
__iter__ unittest.mock._MockIter.__iter__"
Any*:
self2
unittest.mock._MockIter"unittest.mock._MockIterz35z36z37z38z39z310*å
__next__ unittest.mock._MockIter.__next__"
Any*<
self2
unittest.mock._MockIter"unittest.mock._MockIterz35z36z37z38z39z310j35j36j37j38j39j310Ì
Baseunittest.mock.Base"builtins.object*¶
__init__unittest.mock.Base.__init__"
None*2
self(
unittest.mock.Base"unittest.mock.Base*
args
Any*
kwargs
Anyz35z36z37z38z39z310j35j36j37j38j39j310≤=
NonCallableMockunittest.mock.NonCallableMock"unittest.mock.Base*ü
__new__%unittest.mock.NonCallableMock.__new__">
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*p
__clsg
#Type[unittest.mock.NonCallableMock]>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kw
Anyz35z36z37z38z39z310*≥
__init__&unittest.mock.NonCallableMock.__init__"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*ó
specä
MUnion[builtins.list[builtins.str],builtins.object,Type[builtins.object],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"
builtins.object"builtins.object=
Type[builtins.object]"
builtins.object"builtins.object
None *3
wraps&
Union[Any,None]
Any
None *P
nameD
Union[builtins.str,None]
builtins.str"builtins.str
None *õ
spec_setä
MUnion[builtins.list[builtins.str],builtins.object,Type[builtins.object],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"
builtins.object"builtins.object=
Type[builtins.object]"
builtins.object"builtins.object
None *Ö
parentw
)Union[unittest.mock.NonCallableMock,None]>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock
None *9
_spec_state&
Union[Any,None]
Any
None *-
	_new_name
builtins.str"builtins.str *ä
_new_parentw
)Union[unittest.mock.NonCallableMock,None]>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock
None *7
_spec_as_instance
builtins.bool"builtins.bool *X
	_eat_selfG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *,
unsafe
builtins.bool"builtins.bool *
kwargs
Anyz35z36z37z38z39z310*»
__getattr__)unittest.mock.NonCallableMock.__getattr__"
Any*F
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*$
name
builtins.str"builtins.strz35z36z37z38z39z310*‘
assert_called_with0unittest.mock.NonCallableMock.assert_called_with"
None*N

_mock_self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz35z36z37*œ
assert_called_with0unittest.mock.NonCallableMock.assert_called_with"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz38z39z310*™
assert_not_called/unittest.mock.NonCallableMock.assert_not_called"
None*N

_mock_self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz35z36z37*•
assert_not_called/unittest.mock.NonCallableMock.assert_not_called"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz38z39z310*ﬁ
assert_called_once_with5unittest.mock.NonCallableMock.assert_called_once_with"
None*N

_mock_self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz35z36z37*Ÿ
assert_called_once_with5unittest.mock.NonCallableMock.assert_called_once_with"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz38z39z310*ˆ
_format_mock_failure_message:unittest.mock.NonCallableMock._format_mock_failure_message"
builtins.str"builtins.str*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz35z36z37*£
_format_mock_failure_message:unittest.mock.NonCallableMock._format_mock_failure_message"
builtins.str"builtins.str*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Any**
action
builtins.str"builtins.str z38z39z310*¢
assert_called+unittest.mock.NonCallableMock.assert_called"
None*N

_mock_self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz35z36z37*ù
assert_called+unittest.mock.NonCallableMock.assert_called"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz38z39z310*¨
assert_called_once0unittest.mock.NonCallableMock.assert_called_once"
None*N

_mock_self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz35z36z37*ß
assert_called_once0unittest.mock.NonCallableMock.assert_called_once"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz38z39z310*¢

reset_mock(unittest.mock.NonCallableMock.reset_mock"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
visited
Any *2
return_value
builtins.bool"builtins.bool *1
side_effect
builtins.bool"builtins.bool z35z36z37z38z39z310*’
assert_any_call-unittest.mock.NonCallableMock.assert_any_call"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz35z36z37z38z39z310*–
assert_has_calls.unittest.mock.NonCallableMock.assert_has_calls"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*n
callsc
$typing.Sequence[unittest.mock._Call]*
unittest.mock._Call"unittest.mock._Call"typing.Sequence*/
	any_order
builtins.bool"builtins.bool z35z36z37z38z39z310*Ï
mock_add_spec+unittest.mock.NonCallableMock.mock_add_spec"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
spec
Any*.
spec_set
builtins.bool"builtins.bool z35z36z37z38z39z310*÷
_mock_add_spec,unittest.mock.NonCallableMock._mock_add_spec"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
spec
Any*,
spec_set
builtins.bool"builtins.bool*7
_spec_as_instance
builtins.bool"builtins.bool */
	_eat_self
builtins.bool"builtins.bool z35z36z37z38z39z310*ú
attach_mock)unittest.mock.NonCallableMock.attach_mock"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*H
mock>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*+
	attribute
builtins.str"builtins.strz35z36z37z38z39z310*¿
configure_mock,unittest.mock.NonCallableMock.configure_mock"
None*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
kwargs
Anyz35z36z37z38z39z310*Å
_format_mock_call_signature9unittest.mock.NonCallableMock._format_mock_call_signature"
builtins.str"builtins.str*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
args
Any*
kwargs
Anyz35z36z37z38z39z310*π
_call_matcher+unittest.mock.NonCallableMock._call_matcher"*
unittest.mock._Call"unittest.mock._Call*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*l
_calla
#builtins.tuple[unittest.mock._Call]*
unittest.mock._Call"unittest.mock._Call"builtins.tuplez35z36z37z38z39z310*Ù
_get_child_mock-unittest.mock.NonCallableMock._get_child_mock">
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*
kw
Anyz35z36z37z38z39z310*ø
_extract_mock_name0unittest.mock.NonCallableMock._extract_mock_name"
builtins.str"builtins.str*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMockz37z38z39z310*Ë
_get_call_signature_from_name;unittest.mock.NonCallableMock._get_call_signature_from_name"
Any*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock*&
name
builtins.str"builtins.strz37z38z39z310*Ÿ
_calls_repr)unittest.mock.NonCallableMock._calls_repr"
builtins.str"builtins.str*H
self>
unittest.mock.NonCallableMock"unittest.mock.NonCallableMock**
prefix
builtins.str"builtins.str z38z39z310j35j36j37j38j39j310∆
CallableMixinunittest.mock.CallableMixin"unittest.mock.Base*°
__init__$unittest.mock.CallableMixin.__init__"
None*D
self:
unittest.mock.CallableMixin"unittest.mock.CallableMixin*2
spec&
Union[Any,None]
Any
None *9
side_effect&
Union[Any,None]
Any
None *
return_value
Any *3
wraps&
Union[Any,None]
Any
None *2
name&
Union[Any,None]
Any
None *6
spec_set&
Union[Any,None]
Any
None *4
parent&
Union[Any,None]
Any
None *9
_spec_state&
Union[Any,None]
Any
None *
	_new_name
Any *9
_new_parent&
Union[Any,None]
Any
None *
kwargs
Anyz35z36z37z38z39z310*∆
__call__$unittest.mock.CallableMixin.__call__"
Any*J

_mock_self:
unittest.mock.CallableMixin"unittest.mock.CallableMixin*
args
Any*
kwargs
Anyz35z36z37z38z39z310j35j36j37j38j39j310o
Mockunittest.mock.Mock"unittest.mock.CallableMixin"unittest.mock.NonCallableMockj35j36j37j38j39j310Î
_patchunittest.mock._patch"builtins.object*º
__init__unittest.mock._patch.__init__"
None*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*W
getterK
CallableType[builtins.function]&
builtins.function"builtins.function*+
	attribute
builtins.str"builtins.str*
new
unittest.mock._T*0
spec&
Union[Any,None]
Any
None**
create
builtins.bool"builtins.bool*4
spec_set&
Union[Any,None]
Any
None*4
autospec&
Union[Any,None]
Any
None*8
new_callable&
Union[Any,None]
Any
None*e
kwargsY
 typing.Mapping[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Mappingz35z36z37z38z39z310*
copyunittest.mock._patch.copy"T
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patchz35z36z37z38z39z310*∆
__call__unittest.mock._patch.__call__"K
CallableType[builtins.function]&
builtins.function"builtins.function*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*U
funcK
CallableType[builtins.function]&
builtins.function"builtins.functionz35z36z37z38z39z310*Á
decorate_class#unittest.mock._patch.decorate_class"
unittest.mock._TT*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch* 
klass
unittest.mock._TTz35z36z37z38z39z310*Í
decorate_callable&unittest.mock._patch.decorate_callable"
unittest.mock._F*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*
func
unittest.mock._Fz35z36z37z38z39z310*Ò
get_original!unittest.mock._patch.get_original"E
Tuple[Any,builtins.bool]
Any
builtins.bool"builtins.bool*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patchz35z36z37z38z39z310*∏
	__enter__unittest.mock._patch.__enter__"
unittest.mock._T*\
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patchz35z36z37z38z39z310*¡
__exit__unittest.mock._patch.__exit__"
None*\
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*
exc_info
Anyz35z36z37z38z39z310*≤
startunittest.mock._patch.start"
unittest.mock._T*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patchz35z36z37z38z39z310*§
stopunittest.mock._patch.stop"
None*^
selfT
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patchz35z36z37z38z39z310Pj35j36j37j38j39j310’
_patch_dictunittest.mock._patch_dict"builtins.object*Î
__init__"unittest.mock._patch_dict.__init__"
None*@
self6
unittest.mock._patch_dict"unittest.mock._patch_dict*
in_dict
Any*
values
Any *
clear
Any *
kwargs
Anyz35z36z37z38z39z310*¢
__call__"unittest.mock._patch_dict.__call__"
Any*@
self6
unittest.mock._patch_dict"unittest.mock._patch_dict*
f
Anyz35z36z37z38z39z310*≤
decorate_class(unittest.mock._patch_dict.decorate_class"
Any*@
self6
unittest.mock._patch_dict"unittest.mock._patch_dict*
klass
Anyz35z36z37z38z39z310*í
	__enter__#unittest.mock._patch_dict.__enter__"
Any*>
self6
unittest.mock._patch_dict"unittest.mock._patch_dictz35z36z37z38z39z310*£
__exit__"unittest.mock._patch_dict.__exit__"
Any*>
self6
unittest.mock._patch_dict"unittest.mock._patch_dict*
args
Anyz35z36z37z38z39z310j35j36j37j38j39j310›-
_patcherunittest.mock._patcher"builtins.object*õ
multipleunittest.mock._patcher.multiple"T
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None * 
kwargs
unittest.mock._Tz35z36z37z38z39z310*à
stopallunittest.mock._patcher.stopall"
None*:
self0
unittest.mock._patcher"unittest.mock._patcherz35z36z37z38z39z3102á	
__call__unittest.mock._patcher.__call__¢
__call__unittest.mock._patcher.__call__"T
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*
new
unittest.mock._T*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX®
__call__unittest.mock._patcher.__call__"y
-unittest.mock._patch[unittest.mock.MagicMock]2
unittest.mock.MagicMock"unittest.mock.MagicMock"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX"35"36"372ô

__call__unittest.mock._patcher.__call__¢
__call__unittest.mock._patcher.__call__"T
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*
new
unittest.mock._T*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadXπ
__call__unittest.mock._patcher.__call__"â
Lunittest.mock._patch[Union[unittest.mock.MagicMock,unittest.mock.AsyncMock]]¢
6Union[unittest.mock.MagicMock,unittest.mock.AsyncMock]2
unittest.mock.MagicMock"unittest.mock.MagicMock2
unittest.mock.AsyncMock"unittest.mock.AsyncMock"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX"38"39"3102’	
objectunittest.mock._patcher.objectÀ
objectunittest.mock._patcher.object"T
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*+
	attribute
builtins.str"builtins.str*
new
unittest.mock._T*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX—
objectunittest.mock._patcher.object"y
-unittest.mock._patch[unittest.mock.MagicMock]2
unittest.mock.MagicMock"unittest.mock.MagicMock"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*+
	attribute
builtins.str"builtins.str*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX"35"36"372Á

objectunittest.mock._patcher.objectÀ
objectunittest.mock._patcher.object"T
&unittest.mock._patch[unittest.mock._T]
unittest.mock._T"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*+
	attribute
builtins.str"builtins.str*
new
unittest.mock._T*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX‚
objectunittest.mock._patcher.object"â
Lunittest.mock._patch[Union[unittest.mock.MagicMock,unittest.mock.AsyncMock]]¢
6Union[unittest.mock.MagicMock,unittest.mock.AsyncMock]2
unittest.mock.MagicMock"unittest.mock.MagicMock2
unittest.mock.AsyncMock"unittest.mock.AsyncMock"unittest.mock._patch*:
self0
unittest.mock._patcher"unittest.mock._patcher*
target
Any*+
	attribute
builtins.str"builtins.str*2
spec&
Union[Any,None]
Any
None *,
create
builtins.bool"builtins.bool *6
spec_set&
Union[Any,None]
Any
None *6
autospec&
Union[Any,None]
Any
None *:
new_callable&
Union[Any,None]
Any
None *
kwargs
Any0:overloadX"38"39"310j35j36j37j38j39j310á

MagicMixinunittest.mock.MagicMixin"builtins.object*¥
__init__!unittest.mock.MagicMixin.__init__"
None*>
self4
unittest.mock.MagicMixin"unittest.mock.MagicMixin*
args
Any*
kw
Anyz35z36z37z38z39z310j35j36j37j38j39j310ä
NonCallableMagicMock"unittest.mock.NonCallableMagicMock"unittest.mock.MagicMixin"unittest.mock.NonCallableMock*˚
mock_add_spec0unittest.mock.NonCallableMagicMock.mock_add_spec"
None*R
selfH
"unittest.mock.NonCallableMagicMock""unittest.mock.NonCallableMagicMock*
spec
Any*.
spec_set
builtins.bool"builtins.bool z35z36z37z38z39z310j35j36j37j38j39j310»
	MagicMockunittest.mock.MagicMock"unittest.mock.MagicMixin"unittest.mock.Mock*⁄
mock_add_spec%unittest.mock.MagicMock.mock_add_spec"
None*<
self2
unittest.mock.MagicMock"unittest.mock.MagicMock*
spec
Any*.
spec_set
builtins.bool"builtins.bool z35z36z37z38z39z310j35j36j37j38j39j310¥

MagicProxyunittest.mock.MagicProxy"builtins.object*∏
__init__!unittest.mock.MagicProxy.__init__"
None*>
self4
unittest.mock.MagicProxy"unittest.mock.MagicProxy*
name
Any*
parent
Anyz35z36z37z38z39z310*∑
__call__!unittest.mock.MagicProxy.__call__"
Any*>
self4
unittest.mock.MagicProxy"unittest.mock.MagicProxy*
args
Any*
kwargs
Anyz35z36z37z38z39z310*ï
create_mock$unittest.mock.MagicProxy.create_mock"
Any*>
self4
unittest.mock.MagicProxy"unittest.mock.MagicProxyz35z36z37z38z39z310*‘
__get__ unittest.mock.MagicProxy.__get__"
Any*>
self4
unittest.mock.MagicProxy"unittest.mock.MagicProxy*
obj
Any*3
_type&
Union[Any,None]
Any
None z35z36z37z38z39z310j35j36j37j38j39j310ä
_ANYunittest.mock._ANY"builtins.object*†
__eq__unittest.mock._ANY.__eq__"
builtins.bool"builtins.bool*0
self(
unittest.mock._ANY"unittest.mock._ANY*
other
Anyz35z36z37z38z39z310*†
__ne__unittest.mock._ANY.__ne__"
builtins.bool"builtins.bool*0
self(
unittest.mock._ANY"unittest.mock._ANY*
other
Anyz35z36z37z38z39z310j35j36j37j38j39j310≈

_SpecStateunittest.mock._SpecState"builtins.object*Ú
__init__!unittest.mock._SpecState.__init__"
None*>
self4
unittest.mock._SpecState"unittest.mock._SpecState*
spec
Any*
spec_set
Any *4
parent&
Union[Any,None]
Any
None *2
name&
Union[Any,None]
Any
None *1
ids&
Union[Any,None]
Any
None *
instance
Any z35z36z37z38z39z310j35j36j37j38j39j310ä
AsyncMockMixinunittest.mock.AsyncMockMixin"unittest.mock.Base*∏
__init__%unittest.mock.AsyncMockMixin.__init__"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*
args
Any*
kwargs
Anyz38z39z310*í
_execute_mock_call/unittest.mock.AsyncMockMixin._execute_mock_call"L
typing.Coroutine[Any,Any,Any]
Any
Any
Any"typing.Coroutine*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*
args
Any*
kwargs
AnyHz38z39z310*ú
assert_awaited+unittest.mock.AsyncMockMixin.assert_awaited"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixinz38z39z310*¶
assert_awaited_once0unittest.mock.AsyncMockMixin.assert_awaited_once"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixinz38z39z310*Œ
assert_awaited_with0unittest.mock.AsyncMockMixin.assert_awaited_with"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*
args
Any*
kwargs
Anyz38z39z310*ÿ
assert_awaited_once_with5unittest.mock.AsyncMockMixin.assert_awaited_once_with"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*
args
Any*
kwargs
Anyz38z39z310*»
assert_any_await-unittest.mock.AsyncMockMixin.assert_any_await"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*
args
Any*
kwargs
Anyz38z39z310*√
assert_has_awaits.unittest.mock.AsyncMockMixin.assert_has_awaits"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*n
callsc
$typing.Iterable[unittest.mock._Call]*
unittest.mock._Call"unittest.mock._Call"typing.Iterable*/
	any_order
builtins.bool"builtins.bool z38z39z310*§
assert_not_awaited/unittest.mock.AsyncMockMixin.assert_not_awaited"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixinz38z39z310*º

reset_mock'unittest.mock.AsyncMockMixin.reset_mock"
None*F
self<
unittest.mock.AsyncMockMixin"unittest.mock.AsyncMockMixin*
args
Any*
kwargs
Anyz38z39z310j38j39j310ë
AsyncMagicMixinunittest.mock.AsyncMagicMixin"unittest.mock.MagicMixin*∑
__init__&unittest.mock.AsyncMagicMixin.__init__"
None*H
self>
unittest.mock.AsyncMagicMixin"unittest.mock.AsyncMagicMixin*
args
Any*
kw
Anyz38z39z310j38j39j310Ç
	AsyncMockunittest.mock.AsyncMock"unittest.mock.AsyncMockMixin"unittest.mock.AsyncMagicMixin"unittest.mock.Mockj38j39j310\
overloadtyping.overload"
	typing._F*
func
	typing._Fz35z36z37z38z39z310ò
create_autospecunittest.mock.create_autospec"
Any*
spec
Any*
spec_set
Any *
instance
Any *5
_parent&
Union[Any,None]
Any
None *3
_name&
Union[Any,None]
Any
None *
kwargs
Anyz35z36z37z38z39z310î
	mock_openunittest.mock.mock_open"
Any*2
mock&
Union[Any,None]
Any
None *
	read_data
Any z35z36z37z38z39z310H
sealunittest.mock.seal"
None*
mock
Anyz37z38z39z310*%
syssys *35*36*37*38*39*310*N
Any
typing.Any"
builtins.object"builtins.object*35*36*37*38*39*310*`
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*^
Generictyping.Generic*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*`
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*Z
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*X
Typetyping.Type*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*Z
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*35*36*37*38*39*310*Ö
__all__unittest.mock.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*35*36*37*38*39*310*_
__version__unittest.mock.__version__
builtins.str"builtins.str*35*36*37*38*39*310*H

FILTER_DIRunittest.mock.FILTER_DIR
Any*35*36*37*38*39*310*D
sentinelunittest.mock.sentinel
Any*35*36*37*38*39*310*B
DEFAULTunittest.mock.DEFAULT
Any*35*36*37*38*39*310*_
callunittest.mock.call*
unittest.mock._Call"unittest.mock._Call*35*36*37*38*39*310*g
patchunittest.mock.patch0
unittest.mock._patcher"unittest.mock._patcher*35*36*37*38*39*310*:
ANYunittest.mock.ANY
Any*35*36*37*38*39*310