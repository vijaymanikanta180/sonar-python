
unittest 
ABCMetaabc.ABCMeta"builtins.type*¿
__init__abc.ABCMeta.__init__"
None*$
self
abc.ABCMeta"abc.ABCMeta*&
name
builtins.str"builtins.str*Z
basesO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*f
	namespaceW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dictz27*{
__instancecheck__abc.ABCMeta.__instancecheck__"
Any*#
cls
abc.ABCMeta"abc.ABCMeta*
instance
Anyz27*{
__subclasscheck__abc.ABCMeta.__subclasscheck__"
Any*#
cls
abc.ABCMeta"abc.ABCMeta*
subclass
Anyz27*Ê
_dump_registryabc.ABCMeta._dump_registry"
None*#
cls
abc.ABCMeta"abc.ABCMeta*Ñ
filex
(Union[_typeshed.SupportsWrite[Any],None]@
_typeshed.SupportsWrite[Any]
Any"_typeshed.SupportsWrite
None z27*y
registerabc.ABCMeta.register"
None*#
cls
abc.ABCMeta"abc.ABCMeta*$
subclass
	Type[Any]
Anyz27j27Ö
Iterabletyping.Iterable"builtins.object*Ã
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@z278PXj27à
Iteratortyping.Iterator"typing.Iterable*î
nexttyping.Iterator.next"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@z27*∏
__iter__typing.Iterator.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iteratorz278PXj27É
Mappingtyping.Mapping"typing.Iterable"typing.Container*–
__getitem__typing.Mapping.__getitem__"
typing._VT_co*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:abstractmethod@z27*ƒ
keystyping.Mapping.keys":
builtins.list[typing._KT]

typing._KT"builtins.list*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*Œ
valuestyping.Mapping.values"@
builtins.list[typing._VT_co]
typing._VT_co"builtins.list*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*î
itemstyping.Mapping.items"á
.builtins.list[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"builtins.list*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*–
iterkeystyping.Mapping.iterkeys">
typing.Iterator[typing._KT]

typing._KT"typing.Iterator*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*⁄

itervaluestyping.Mapping.itervalues"D
typing.Iterator[typing._VT_co]
typing._VT_co"typing.Iterator*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*†
	iteritemstyping.Mapping.iteritems"ã
0typing.Iterator[Tuple[typing._KT,typing._VT_co]]F
Tuple[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Iterator*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mappingz27*ﬂ
__contains__typing.Mapping.__contains__"
builtins.bool"builtins.bool*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*'
o"
builtins.object"builtins.objectz27*æ
__len__typing.Mapping.__len__"
builtins.int"builtins.int*e
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping0:abstractmethod@z272∆
gettyping.Mapping.get„
gettyping.Mapping.get":
Union[typing._VT_co,None]
typing._VT_co
None*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT0:overloadX¿
gettyping.Mapping.get"D
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T*g
self]
(typing.Mapping[typing._KT,typing._VT_co]

typing._KT
typing._VT_co"typing.Mapping*
k

typing._KT*Q
defaultD
Union[typing._VT_co,typing._T]
typing._VT_co
	typing._T0:overloadX"27Pj27ê
Patterntyping.Pattern"builtins.object*‰
searchtyping.Pattern.search"{
)Union[typing.Match[typing._AnyStr2],None]B
typing.Match[typing._AnyStr2]
typing._AnyStr2"typing.Match
None*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing._AnyStr2*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int z27*‚
matchtyping.Pattern.match"{
)Union[typing.Match[typing._AnyStr2],None]B
typing.Match[typing._AnyStr2]
typing._AnyStr2"typing.Match
None*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing._AnyStr2*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int z27*Ñ
splittyping.Pattern.split"D
builtins.list[typing._AnyStr2]
typing._AnyStr2"builtins.list*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing._AnyStr2*,
maxsplit
builtins.int"builtins.int z27*
findalltyping.Pattern.findall",
builtins.list[Any]
Any"builtins.list*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*x
stringl
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int z27*Û
finditertyping.Pattern.finditer"Ö
.typing.Iterator[typing.Match[typing._AnyStr2]]B
typing.Match[typing._AnyStr2]
typing._AnyStr2"typing.Match"typing.Iterator*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
string
typing._AnyStr2*'
pos
builtins.int"builtins.int **
endpos
builtins.int"builtins.int z272≈
subtyping.Pattern.subı
subtyping.Pattern.sub"
typing._AnyStr2*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
repl
typing._AnyStr2*
string
typing._AnyStr2*)
count
builtins.int"builtins.int 0:overloadX≠
subtyping.Pattern.sub"
typing._AnyStr2*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*U
replK
CallableType[builtins.function]&
builtins.function"builtins.function*
string
typing._AnyStr2*)
count
builtins.int"builtins.int 0:overloadX"272Ÿ
subntyping.Pattern.subnæ
subntyping.Pattern.subn"Z
#Tuple[typing._AnyStr2,builtins.int]
typing._AnyStr2
builtins.int"builtins.int*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
repl
typing._AnyStr2*
string
typing._AnyStr2*)
count
builtins.int"builtins.int 0:overloadXˆ
subntyping.Pattern.subn"Z
#Tuple[typing._AnyStr2,builtins.int]
typing._AnyStr2
builtins.int"builtins.int*L
selfB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*U
replK
CallableType[builtins.function]&
builtins.function"builtins.function*
string
typing._AnyStr2*)
count
builtins.int"builtins.int 0:overloadX"27Pj27â
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27ƒ
TextIOtyping.TextIO"	typing.IO*~
buffertyping.TextIO.buffer""
typing.BinaryIO"typing.BinaryIO*(
self
typing.TextIO"typing.TextIO0:property`z27*|
encodingtyping.TextIO.encoding"
builtins.str"builtins.str*(
self
typing.TextIO"typing.TextIO0:property`z27*†
errorstyping.TextIO.errors"D
Union[builtins.str,None]
builtins.str"builtins.str
None*(
self
typing.TextIO"typing.TextIO0:property`z27*ä
line_bufferingtyping.TextIO.line_buffering"
builtins.bool"builtins.bool*(
self
typing.TextIO"typing.TextIO0:property`z27*g
newlinestyping.TextIO.newlines"
Any*(
self
typing.TextIO"typing.TextIO0:property`z27*Ñ
	__enter__typing.TextIO.__enter__"
typing.TextIO"typing.TextIO*&
self
typing.TextIO"typing.TextIO0:abstractmethod@z27j27è
TypeVartyping.TypeVar"builtins.object*ﬁ
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*H
bound;
Union[Type[Any],None]
	Type[Any]
Any
None */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z27j27ˇ
Testableunittest.Testable"builtins.object*®
rununittest.Testable.run"
None*0
self&
unittest.Testable"unittest.Testable*6
result*
unittest.TestResult"unittest.TestResult0:abstractmethod@z27*t
debugunittest.Testable.debug"
None*0
self&
unittest.Testable"unittest.Testable0:abstractmethod@z27*ö
countTestCases unittest.Testable.countTestCases"
builtins.int"builtins.int*0
self&
unittest.Testable"unittest.Testable0:abstractmethod@z27@babc.ABCMetaj27»

TestResultunittest.TestResult"builtins.object*å
wasSuccessful!unittest.TestResult.wasSuccessful"
builtins.bool"builtins.bool*4
self*
unittest.TestResult"unittest.TestResultz27*d
stopunittest.TestResult.stop"
None*4
self*
unittest.TestResult"unittest.TestResultz27*†
	startTestunittest.TestResult.startTest"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCasez27*û
stopTestunittest.TestResult.stopTest"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCasez27*t
startTestRun unittest.TestResult.startTestRun"
None*4
self*
unittest.TestResult"unittest.TestResultz27*r
stopTestRununittest.TestResult.stopTestRun"
None*4
self*
unittest.TestResult"unittest.TestResultz27*Ò
addErrorunittest.TestResult.addError"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCase*–
err∆
vTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]]Ø
kUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType7
Tuple[None,None,None]
None
None
None"unittest._SysExcInfoTypez27*ı

addFailureunittest.TestResult.addFailure"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCase*–
err∆
vTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]]Ø
kUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType7
Tuple[None,None,None]
None
None
None"unittest._SysExcInfoTypez27*¢

addSuccessunittest.TestResult.addSuccess"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCasez27*∆
addSkipunittest.TestResult.addSkip"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCase*(
reason
builtins.str"builtins.strz27*Ÿ
addExpectedFailure&unittest.TestResult.addExpectedFailure"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCase*%
err
builtins.str"builtins.strz27*∂
addUnexpectedSuccess(unittest.TestResult.addUnexpectedSuccess"
None*4
self*
unittest.TestResult"unittest.TestResult*0
test&
unittest.TestCase"unittest.TestCasez27j27R
_AssertRaisesBaseContext!unittest._AssertRaisesBaseContext"builtins.objectj27˙
_AssertRaisesContextunittest._AssertRaisesContext"!unittest._AssertRaisesBaseContext*¿
	__enter__'unittest._AssertRaisesContext.__enter__">
unittest._AssertRaisesContext"unittest._AssertRaisesContext*F
self>
unittest._AssertRaisesContext"unittest._AssertRaisesContextz27*ÿ
__exit__&unittest._AssertRaisesContext.__exit__"
builtins.bool"builtins.bool*F
self>
unittest._AssertRaisesContext"unittest._AssertRaisesContext*
exc_type
Any*
	exc_value
Any*
tb
Anyz27j27’£
TestCaseunittest.TestCase"unittest.Testable*ñ
__init__unittest.TestCase.__init__"
None*0
self&
unittest.TestCase"unittest.TestCase*.

methodName
builtins.str"builtins.str z27*`
setUpunittest.TestCase.setUp"
None*0
self&
unittest.TestCase"unittest.TestCasez27*f
tearDownunittest.TestCase.tearDown"
None*0
self&
unittest.TestCase"unittest.TestCasez27*ó

setUpClassunittest.TestCase.setUpClass"
None*L
clsC
Type[unittest.TestCase]&
unittest.TestCase"unittest.TestCase0:classmethodpz27*ù
tearDownClassunittest.TestCase.tearDownClass"
None*L
clsC
Type[unittest.TestCase]&
unittest.TestCase"unittest.TestCase0:classmethodpz27*ñ
rununittest.TestCase.run"
None*0
self&
unittest.TestCase"unittest.TestCase*8
result*
unittest.TestResult"unittest.TestResult z27*`
debugunittest.TestCase.debug"
None*0
self&
unittest.TestCase"unittest.TestCasez27*¶
assert_unittest.TestCase.assert_"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*¨

failUnlessunittest.TestCase.failUnless"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*¨

assertTrueunittest.TestCase.assertTrue"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*ƒ
assertEqualunittest.TestCase.assertEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*∆
assertEqualsunittest.TestCase.assertEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*Ã
failUnlessEqual!unittest.TestCase.failUnlessEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27* 
assertNotEqual unittest.TestCase.assertNotEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*Ã
assertNotEquals!unittest.TestCase.assertNotEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*ƒ
failIfEqualunittest.TestCase.failIfEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*∂
failUnlessAlmostEqual'unittest.TestCase.failUnlessAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *-
msg"
builtins.object"builtins.object z27*›
failIfAlmostEqual#unittest.TestCase.failIfAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *-
msg"
builtins.object"builtins.object *-
delta 
builtins.float"builtins.float z27*»
assertGreaterunittest.TestCase.assertGreater"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*“
assertGreaterEqual$unittest.TestCase.assertGreaterEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*Ä
assertMultiLineEqual&unittest.TestCase.assertMultiLineEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*'
first
builtins.str"builtins.str*(
second
builtins.str"builtins.str*-
msg"
builtins.object"builtins.object z27*÷
assertSequenceEqual%unittest.TestCase.assertSequenceEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*;
first0
typing.Sequence[Any]
Any"typing.Sequence*<
second0
typing.Sequence[Any]
Any"typing.Sequence*-
msg"
builtins.object"builtins.object *.
seq_type
builtins.type"builtins.type z27*ñ
assertListEqual!unittest.TestCase.assertListEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*7
first,
builtins.list[Any]
Any"builtins.list*8
second,
builtins.list[Any]
Any"builtins.list*-
msg"
builtins.object"builtins.object z27*ú
assertTupleEqual"unittest.TestCase.assertTupleEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*9
first.
builtins.tuple[Any]
Any"builtins.tuple*:
second.
builtins.tuple[Any]
Any"builtins.tuple*-
msg"
builtins.object"builtins.object z27*
assertSetEqual unittest.TestCase.assertSetEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*§
firstò
0Union[builtins.set[Any],builtins.frozenset[Any]]*
builtins.set[Any]
Any"builtins.set6
builtins.frozenset[Any]
Any"builtins.frozenset*•
secondò
0Union[builtins.set[Any],builtins.frozenset[Any]]*
builtins.set[Any]
Any"builtins.set6
builtins.frozenset[Any]
Any"builtins.frozenset*-
msg"
builtins.object"builtins.object z27*∞
assertDictEqual!unittest.TestCase.assertDictEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*D
first9
builtins.dict[Any,Any]
Any
Any"builtins.dict*E
second9
builtins.dict[Any,Any]
Any
Any"builtins.dict*-
msg"
builtins.object"builtins.object z27*¬

assertLessunittest.TestCase.assertLess"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*Ã
assertLessEqual!unittest.TestCase.assertLessEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Any*-
msg"
builtins.object"builtins.object z27*É
assertRegexpMatches%unittest.TestCase.assertRegexpMatches"
None*0
self&
unittest.TestCase"unittest.TestCase*.
text$
builtins.unicode"builtins.unicode*•
regexpò
CTypeAlias[Union[builtins.unicode,typing.Pattern[builtins.unicode]]]º
8Union[builtins.unicode,typing.Pattern[builtins.unicode]]$
builtins.unicode"builtins.unicodeX
 typing.Pattern[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Pattern"unittest._Regexp*-
msg"
builtins.object"builtins.object z27*â
assertNotRegexpMatches(unittest.TestCase.assertNotRegexpMatches"
None*0
self&
unittest.TestCase"unittest.TestCase*.
text$
builtins.unicode"builtins.unicode*•
regexpò
CTypeAlias[Union[builtins.unicode,typing.Pattern[builtins.unicode]]]º
8Union[builtins.unicode,typing.Pattern[builtins.unicode]]$
builtins.unicode"builtins.unicodeX
 typing.Pattern[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Pattern"unittest._Regexp*-
msg"
builtins.object"builtins.object z27*†
assertItemsEqual"unittest.TestCase.assertItemsEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*;
first0
typing.Iterable[Any]
Any"typing.Iterable*<
second0
typing.Iterable[Any]
Any"typing.Iterable*-
msg"
builtins.object"builtins.object z27*…
assertDictContainsSubset*unittest.TestCase.assertDictContainsSubset"
None*0
self&
unittest.TestCase"unittest.TestCase*I
expected;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*G
actual;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*-
msg"
builtins.object"builtins.object z27*Ñ
addTypeEqualityFunc%unittest.TestCase.addTypeEqualityFunc"
None*0
self&
unittest.TestCase"unittest.TestCase*+
typeobj
builtins.type"builtins.type*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.functionz27*§
failIfunittest.TestCase.failIf"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*Æ
assertFalseunittest.TestCase.assertFalse"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*Ù
assertIsunittest.TestCase.assertIs"
None*0
self&
unittest.TestCase"unittest.TestCase*-
first"
builtins.object"builtins.object*.
second"
builtins.object"builtins.object*-
msg"
builtins.object"builtins.object z27*˙
assertIsNotunittest.TestCase.assertIsNot"
None*0
self&
unittest.TestCase"unittest.TestCase*-
first"
builtins.object"builtins.object*.
second"
builtins.object"builtins.object*-
msg"
builtins.object"builtins.object z27*∞
assertIsNoneunittest.TestCase.assertIsNone"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*∂
assertIsNotNone!unittest.TestCase.assertIsNotNone"
None*0
self&
unittest.TestCase"unittest.TestCase*
expr
Any*-
msg"
builtins.object"builtins.object z27*ˇ
assertInunittest.TestCase.assertIn"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
unittest._T*L
second@
typing.Iterable[unittest._T]
unittest._T"typing.Iterable*-
msg"
builtins.object"builtins.object z27*Ö
assertNotInunittest.TestCase.assertNotIn"
None*0
self&
unittest.TestCase"unittest.TestCase*
first
unittest._T*L
second@
typing.Iterable[unittest._T]
unittest._T"typing.Iterable*-
msg"
builtins.object"builtins.object z27*Î
assertIsInstance"unittest.TestCase.assertIsInstance"
None*0
self&
unittest.TestCase"unittest.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*-
msg"
builtins.object"builtins.object z27*Ò
assertNotIsInstance%unittest.TestCase.assertNotIsInstance"
None*0
self&
unittest.TestCase"unittest.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*-
msg"
builtins.object"builtins.object z27*ë
failunittest.TestCase.fail"
NoReturn
*0
self&
unittest.TestCase"unittest.TestCase*-
msg"
builtins.object"builtins.object z27*Ü
countTestCases unittest.TestCase.countTestCases"
builtins.int"builtins.int*0
self&
unittest.TestCase"unittest.TestCasez27*ö
defaultTestResult#unittest.TestCase.defaultTestResult"*
unittest.TestResult"unittest.TestResult*0
self&
unittest.TestCase"unittest.TestCasez27*n
idunittest.TestCase.id"
builtins.str"builtins.str*0
self&
unittest.TestCase"unittest.TestCasez27*ä
shortDescription"unittest.TestCase.shortDescription"
builtins.str"builtins.str*0
self&
unittest.TestCase"unittest.TestCasez27*©

addCleanupunittest.TestCase.addCleanup"
None*0
self&
unittest.TestCase"unittest.TestCase*
function
Any*
args
Any*
kwargs
Anyz27*Ä

doCleanupsunittest.TestCase.doCleanups"
builtins.bool"builtins.bool*0
self&
unittest.TestCase"unittest.TestCasez27*{
skipTestunittest.TestCase.skipTest"
None*0
self&
unittest.TestCase"unittest.TestCase*
reason
Anyz27*ò
_formatMessage unittest.TestCase._formatMessage"
builtins.str"builtins.str*0
self&
unittest.TestCase"unittest.TestCase*Y
msgP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
None*5
standardMsg$
builtins.unicode"builtins.unicodez27*Ó
_getAssertEqualityFunc(unittest.TestCase._getAssertEqualityFunc"K
CallableType[builtins.function]&
builtins.function"builtins.function*0
self&
unittest.TestCase"unittest.TestCase*
first
Any*
second
Anyz272∂
assertAlmostEqual#unittest.TestCase.assertAlmostEqualù
assertAlmostEqual#unittest.TestCase.assertAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any 0:overloadX†
assertAlmostEqual#unittest.TestCase.assertAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *-
delta 
builtins.float"builtins.float 0:overloadX¥
assertAlmostEqual#unittest.TestCase.assertAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*
msg
Any *5
delta(
datetime.timedelta"datetime.timedelta 0:overloadX"272æ
assertAlmostEquals$unittest.TestCase.assertAlmostEqualsü
assertAlmostEquals$unittest.TestCase.assertAlmostEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any 0:overloadX¢
assertAlmostEquals$unittest.TestCase.assertAlmostEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *-
delta 
builtins.float"builtins.float 0:overloadX∂
assertAlmostEquals$unittest.TestCase.assertAlmostEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*
msg
Any *5
delta(
datetime.timedelta"datetime.timedelta 0:overloadX"272Œ
assertNotAlmostEqual&unittest.TestCase.assertNotAlmostEqual£
assertNotAlmostEqual&unittest.TestCase.assertNotAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any 0:overloadX¶
assertNotAlmostEqual&unittest.TestCase.assertNotAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *-
delta 
builtins.float"builtins.float 0:overloadX∫
assertNotAlmostEqual&unittest.TestCase.assertNotAlmostEqual"
None*0
self&
unittest.TestCase"unittest.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*
msg
Any *5
delta(
datetime.timedelta"datetime.timedelta 0:overloadX"272÷
assertNotAlmostEquals'unittest.TestCase.assertNotAlmostEquals•
assertNotAlmostEquals'unittest.TestCase.assertNotAlmostEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any 0:overloadX®
assertNotAlmostEquals'unittest.TestCase.assertNotAlmostEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *-
delta 
builtins.float"builtins.float 0:overloadXº
assertNotAlmostEquals'unittest.TestCase.assertNotAlmostEquals"
None*0
self&
unittest.TestCase"unittest.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*
msg
Any *5
delta(
datetime.timedelta"datetime.timedelta 0:overloadX"272˜

assertRaisesunittest.TestCase.assertRaises∆
assertRaisesunittest.TestCase.assertRaises"
None*0
self&
unittest.TestCase"unittest.TestCase*»
	exception∏
[TypeAlias[Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]]Ω
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple"unittest._ExceptionType*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX˘
assertRaisesunittest.TestCase.assertRaises">
unittest._AssertRaisesContext"unittest._AssertRaisesContext*0
self&
unittest.TestCase"unittest.TestCase*»
	exception∏
[TypeAlias[Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]]Ω
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple"unittest._ExceptionType0:overloadX"272Î
assertRaisesRegexp$unittest.TestCase.assertRaisesRegexp˙
assertRaisesRegexp$unittest.TestCase.assertRaisesRegexp"
None*0
self&
unittest.TestCase"unittest.TestCase*»
	exception∏
[TypeAlias[Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]]Ω
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple"unittest._ExceptionType*•
regexpò
CTypeAlias[Union[builtins.unicode,typing.Pattern[builtins.unicode]]]º
8Union[builtins.unicode,typing.Pattern[builtins.unicode]]$
builtins.unicode"builtins.unicodeX
 typing.Pattern[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Pattern"unittest._Regexp*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX≠
assertRaisesRegexp$unittest.TestCase.assertRaisesRegexp">
unittest._AssertRaisesContext"unittest._AssertRaisesContext*0
self&
unittest.TestCase"unittest.TestCase*»
	exception∏
[TypeAlias[Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]]Ω
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple"unittest._ExceptionType*•
regexpò
CTypeAlias[Union[builtins.unicode,typing.Pattern[builtins.unicode]]]º
8Union[builtins.unicode,typing.Pattern[builtins.unicode]]$
builtins.unicode"builtins.unicodeX
 typing.Pattern[builtins.unicode]$
builtins.unicode"builtins.unicode"typing.Pattern"unittest._Regexp0:overloadX"272è
failUnlessRaises"unittest.TestCase.failUnlessRaisesŒ
failUnlessRaises"unittest.TestCase.failUnlessRaises"
None*0
self&
unittest.TestCase"unittest.TestCase*»
	exception∏
[TypeAlias[Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]]Ω
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple"unittest._ExceptionType*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÅ
failUnlessRaises"unittest.TestCase.failUnlessRaises">
unittest._AssertRaisesContext"unittest._AssertRaisesContext*0
self&
unittest.TestCase"unittest.TestCase*»
	exception∏
[TypeAlias[Union[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]]Ω
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple"unittest._ExceptionType0:overloadX"27j27≈
FunctionTestCaseunittest.FunctionTestCase"unittest.TestCase*„
__init__"unittest.FunctionTestCase.__init__"
None*@
self6
unittest.FunctionTestCase"unittest.FunctionTestCase*Y
testFuncK
CallableType[builtins.function]&
builtins.function"builtins.function*î
setUpÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
tearDownÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*x
debugunittest.FunctionTestCase.debug"
None*@
self6
unittest.FunctionTestCase"unittest.FunctionTestCasez27*û
countTestCases(unittest.FunctionTestCase.countTestCases"
builtins.int"builtins.int*@
self6
unittest.FunctionTestCase"unittest.FunctionTestCasez27j27 	
	TestSuiteunittest.TestSuite"unittest.Testable*’
__init__unittest.TestSuite.__init__"
None*2
self(
unittest.TestSuite"unittest.TestSuite*j
tests]
"typing.Iterable[unittest.Testable]&
unittest.Testable"unittest.Testable"typing.Iterable z27*ô
addTestunittest.TestSuite.addTest"
None*2
self(
unittest.TestSuite"unittest.TestSuite*0
test&
unittest.Testable"unittest.Testablez27*”
addTestsunittest.TestSuite.addTests"
None*2
self(
unittest.TestSuite"unittest.TestSuite*h
tests]
"typing.Iterable[unittest.Testable]&
unittest.Testable"unittest.Testable"typing.Iterablez27*ó
rununittest.TestSuite.run"
None*2
self(
unittest.TestSuite"unittest.TestSuite*6
result*
unittest.TestResult"unittest.TestResultz27*c
debugunittest.TestSuite.debug"
None*2
self(
unittest.TestSuite"unittest.TestSuitez27*â
countTestCases!unittest.TestSuite.countTestCases"
builtins.int"builtins.int*2
self(
unittest.TestSuite"unittest.TestSuitez27*º
__iter__unittest.TestSuite.__iter__"]
"typing.Iterator[unittest.Testable]&
unittest.Testable"unittest.Testable"typing.Iterator*0
self(
unittest.TestSuite"unittest.TestSuitez27j27¨

TestLoaderunittest.TestLoader"builtins.object*˛
loadTestsFromTestCase)unittest.TestLoader.loadTestsFromTestCase"(
unittest.TestSuite"unittest.TestSuite*4
self*
unittest.TestLoader"unittest.TestLoader*V
testCaseClassC
Type[unittest.TestCase]&
unittest.TestCase"unittest.TestCasez27*å
loadTestsFromModule'unittest.TestLoader.loadTestsFromModule"(
unittest.TestSuite"unittest.TestSuite*4
self*
unittest.TestLoader"unittest.TestLoader*2
module$
types.ModuleType"types.ModuleType *4
use_load_tests
builtins.bool"builtins.bool z27*®
loadTestsFromName%unittest.TestLoader.loadTestsFromName"(
unittest.TestSuite"unittest.TestSuite*4
self*
unittest.TestLoader"unittest.TestLoader*(
name
builtins.str"builtins.str *^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None z27*Ÿ
loadTestsFromNames&unittest.TestLoader.loadTestsFromNames"(
unittest.TestSuite"unittest.TestSuite*4
self*
unittest.TestLoader"unittest.TestLoader*W
namesJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list *^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None z27*¡
discoverunittest.TestLoader.discover"(
unittest.TestSuite"unittest.TestSuite*4
self*
unittest.TestLoader"unittest.TestLoader*+
	start_dir
builtins.str"builtins.str*+
pattern
builtins.str"builtins.str *Y
top_level_dirD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*ò
getTestCaseNames$unittest.TestLoader.getTestCaseNames"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*4
self*
unittest.TestLoader"unittest.TestLoader*X
testCaseClassC
Type[unittest.TestCase]&
unittest.TestCase"unittest.TestCase z27j27ç
TextTestResultunittest.TextTestResult"unittest.TestResult*É
__init__ unittest.TextTestResult.__init__"
None*<
self2
unittest.TextTestResult"unittest.TextTestResult**
stream
typing.TextIO"typing.TextIO*0
descriptions
builtins.bool"builtins.bool*+
	verbosity
builtins.int"builtins.intz27* 
getDescription&unittest.TextTestResult.getDescription"
builtins.str"builtins.str*<
self2
unittest.TextTestResult"unittest.TextTestResult*0
test&
unittest.TestCase"unittest.TestCasez27*~
printErrors#unittest.TextTestResult.printErrors"
None*<
self2
unittest.TextTestResult"unittest.TextTestResultz27*ı
printErrorList&unittest.TextTestResult.printErrorList"
None*<
self2
unittest.TextTestResult"unittest.TextTestResult*)
flavour
builtins.str"builtins.str*√
errors∂
4builtins.list[Tuple[unittest.TestCase,builtins.str]]o
%Tuple[unittest.TestCase,builtins.str]&
unittest.TestCase"unittest.TestCase
builtins.str"builtins.str"builtins.listz27j27Õ
TextTestRunnerunittest.TextTestRunner"builtins.object*§
__init__ unittest.TextTestRunner.__init__"
None*<
self2
unittest.TextTestRunner"unittest.TextTestRunner*U
streamG
Union[typing.TextIO,None]
typing.TextIO"typing.TextIO
None *2
descriptions
builtins.bool"builtins.bool *-
	verbosity
builtins.int"builtins.int *.
failfast
builtins.bool"builtins.bool *,
buffer
builtins.bool"builtins.bool *ë
resultclass~
%Union[Type[unittest.TestResult],None]I
Type[unittest.TestResult]*
unittest.TestResult"unittest.TestResult
None z27*†
_makeResult#unittest.TextTestRunner._makeResult"*
unittest.TestResult"unittest.TestResult*<
self2
unittest.TextTestRunner"unittest.TextTestRunnerz27*¬
rununittest.TextTestRunner.run"*
unittest.TestResult"unittest.TestResult*<
self2
unittest.TextTestRunner"unittest.TextTestRunner*0
test&
unittest.Testable"unittest.Testablez27j275
SkipTestunittest.SkipTest"builtins.Exceptionj27©
TestProgramunittest.TestProgram"builtins.object*o
runTestsunittest.TestProgram.runTests"
None*6
self,
unittest.TestProgram"unittest.TestProgramz27j27ê
FunctionTestCaseunittest.case.FunctionTestCase"unittest.case.TestCase*á
__init__'unittest.case.FunctionTestCase.__init__"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCase*Y
testFuncK
CallableType[builtins.function]&
builtins.function"builtins.function*î
setUpÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
tearDownÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310*†
runTest&unittest.case.FunctionTestCase.runTest"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCasez35z36z37z38z39z310j35j36j37j38j39j310Ü
SkipTestunittest.case.SkipTest"builtins.Exception*¥
__init__unittest.case.SkipTest.__init__"
None*:
self0
unittest.case.SkipTest"unittest.case.SkipTest*(
reason
builtins.str"builtins.strz35z36z37z38z39z310j35j36j37j38j39j310¸ﬂ
TestCaseunittest.case.TestCase"builtins.object*∫
__init__unittest.case.TestCase.__init__"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*.

methodName
builtins.str"builtins.str z35z36z37z38z39z310*Ñ
setUpunittest.case.TestCase.setUp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*ä
tearDownunittest.case.TestCase.tearDown"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*¿

setUpClass!unittest.case.TestCase.setUpClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz35z36z37z38z39z310*∆
tearDownClass$unittest.case.TestCase.tearDownClass"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz35z36z37z38z39z310*‰
rununittest.case.TestCase.run"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z35z36z37z38z39z310*Ó
__call__unittest.case.TestCase.__call__"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z35z36z37z38z39z310*ü
skipTestunittest.case.TestCase.skipTest"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
reason
Anyz35z36z37z38z39z310*Á
subTestunittest.case.TestCase.subTest">
typing.ContextManager[None]
None"typing.ContextManager*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any *
params
Anyz35z36z37z38z39z310*Ñ
debugunittest.case.TestCase.debug"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*ª
_addSkipunittest.case.TestCase._addSkip"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*D
result8
unittest.result.TestResult"unittest.result.TestResult*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*(
reason
builtins.str"builtins.strz35z36z37z38z39z310*Õ
assertEqual"unittest.case.TestCase.assertEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*”
assertNotEqual%unittest.case.TestCase.assertNotEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*µ

assertTrue!unittest.case.TestCase.assertTrue"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z35z36z37z38z39z310*∑
assertFalse"unittest.case.TestCase.assertFalse"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z35z36z37z38z39z310*∆
assertIsunittest.case.TestCase.assertIs"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr1
Any*
expr2
Any*
msg
Any z35z36z37z38z39z310*Ã
assertIsNot"unittest.case.TestCase.assertIsNot"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr1
Any*
expr2
Any*
msg
Any z35z36z37z38z39z310*∏
assertIsNone#unittest.case.TestCase.assertIsNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*
msg
Any z35z36z37z38z39z310*æ
assertIsNotNone&unittest.case.TestCase.assertIsNotNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*
msg
Any z35z36z37z38z39z310*·
assertInunittest.case.TestCase.assertIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z35z36z37z38z39z310*Á
assertNotIn"unittest.case.TestCase.assertNotIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z35z36z37z38z39z310*Ù
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
msg
Any z35z36z37z38z39z310*˙
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
obj
Any*±
clsß
2Union[builtins.type,builtins.tuple[builtins.type]]
builtins.type"builtins.typeO
builtins.tuple[builtins.type]
builtins.type"builtins.type"builtins.tuple*
msg
Any z35z36z37z38z39z310*»
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*“
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*¬

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*Ã
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
a
Any*
b
Any*
msg
Any z35z36z37z38z39z310*Œ

assertLogs!unittest.case.TestCase.assertLogs"D
 unittest.case._AssertLogsContext" unittest.case._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z35z36z37z38z39z310*Ê
assertRegex"unittest.case.TestCase.assertRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*¢
expected_regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*Ó
assertNotRegex%unittest.case.TestCase.assertNotRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*§
unexpected_regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*©
assertCountEqual'unittest.case.TestCase.assertCountEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*;
first0
typing.Iterable[Any]
Any"typing.Iterable*<
second0
typing.Iterable[Any]
Any"typing.Iterable*
msg
Any z35z36z37z38z39z310*†
addTypeEqualityFunc*unittest.case.TestCase.addTypeEqualityFunc"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*#
typeobj
	Type[Any]
Any*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.functionz35z36z37z38z39z310*â
assertMultiLineEqual+unittest.case.TestCase.assertMultiLineEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*'
first
builtins.str"builtins.str*(
second
builtins.str"builtins.str*
msg
Any z35z36z37z38z39z310*∆
assertSequenceEqual*unittest.case.TestCase.assertSequenceEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
seq10
typing.Sequence[Any]
Any"typing.Sequence*:
seq20
typing.Sequence[Any]
Any"typing.Sequence*
msg
Any *ó
seq_typeÜ
&Union[Type[typing.Sequence[Any]],None]P
Type[typing.Sequence[Any]]0
typing.Sequence[Any]
Any"typing.Sequence
None z35z36z37z38z39z310*û
assertListEqual&unittest.case.TestCase.assertListEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*7
list1,
builtins.list[Any]
Any"builtins.list*7
list2,
builtins.list[Any]
Any"builtins.list*
msg
Any z35z36z37z38z39z310*¶
assertTupleEqual'unittest.case.TestCase.assertTupleEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
tuple1.
builtins.tuple[Any]
Any"builtins.tuple*:
tuple2.
builtins.tuple[Any]
Any"builtins.tuple*
msg
Any z35z36z37z38z39z310*¸
assertSetEqual%unittest.case.TestCase.assertSetEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
set1]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*g
set2]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*
msg
Any z35z36z37z38z39z310*Ñ
assertDictEqual&unittest.case.TestCase.assertDictEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*j
d1b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*j
d2b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*
msg
Any z35z36z37z38z39z310*ö
failunittest.case.TestCase.fail"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any z35z36z37z38z39z310*™
countTestCases%unittest.case.TestCase.countTestCases"
builtins.int"builtins.int*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*Ã
defaultTestResult(unittest.case.TestCase.defaultTestResult"8
unittest.result.TestResult"unittest.result.TestResult*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*í
idunittest.case.TestCase.id"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*÷
shortDescription'unittest.case.TestCase.shortDescription"D
Union[builtins.str,None]
builtins.str"builtins.str
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*Ñ

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz35z36z37*Ö

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z39z310*é

doCleanups!unittest.case.TestCase.doCleanups"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*®
_formatMessage%unittest.case.TestCase._formatMessage"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCase*M
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*-
standardMsg
builtins.str"builtins.strz35z36z37z38z39z310*í
_getAssertEqualityFunc-unittest.case.TestCase._getAssertEqualityFunc"K
CallableType[builtins.function]&
builtins.function"builtins.function*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Anyz35z36z37z38z39z310*’
failUnlessEqual&unittest.case.TestCase.failUnlessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*œ
assertEquals#unittest.case.TestCase.assertEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*Õ
failIfEqual"unittest.case.TestCase.failIfEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*’
assertNotEquals&unittest.case.TestCase.assertNotEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z35z36z37z38z39z310*Ã

failUnless!unittest.case.TestCase.failUnless"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z39z310*∆
assert_unittest.case.TestCase.assert_"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z39z310*ƒ
failIfunittest.case.TestCase.failIf"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*(
expr
builtins.bool"builtins.bool*
msg
Any z35z36z37z38z39z310*ø
failUnlessAlmostEqual,unittest.case.TestCase.failUnlessAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any z35z36z37z38z39z310*Ë
assertAlmostEquals)unittest.case.TestCase.assertAlmostEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any *-
delta 
builtins.float"builtins.float z35z36z37z38z39z310*∑
failIfAlmostEqual(unittest.case.TestCase.failIfAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any z35z36z37z38z39z310*Ó
assertNotAlmostEquals,unittest.case.TestCase.assertNotAlmostEquals"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float**
places
builtins.int"builtins.int *
msg
Any *-
delta 
builtins.float"builtins.float z35z36z37z38z39z310*Ì
assertRegexpMatches*unittest.case.TestCase.assertRegexpMatches"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ô
regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*Û
assertNotRegexpMatches-unittest.case.TestCase.assertNotRegexpMatches"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
text
typing.AnyStr*ô
regexç
2Union[typing.AnyStr,typing.Pattern[typing.AnyStr]]
typing.AnyStrB
typing.Pattern[typing.AnyStr]
typing.AnyStr"typing.Pattern*
msg
Any z35z36z37z38z39z310*Ô
assertDictContainsSubset/unittest.case.TestCase.assertDictContainsSubset"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*G
subset;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*K

dictionary;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*-
msg"
builtins.object"builtins.object z35z36z37z38z39z310*¡
addClassCleanup&unittest.case.TestCase.addClassCleanup"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:classmethodpz38z39z310*æ
doClassCleanups&unittest.case.TestCase.doClassCleanups"
None*[
clsR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase0:classmethodpz38z39z3102∫	
assertRaises#unittest.case.TestCase.assertRaises„
assertRaises#unittest.case.TestCase.assertRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÖ
assertRaises#unittest.case.TestCase.assertRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39"3102ê
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex…
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*÷
expected_exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÎ
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˇ
expected_exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39"3102Ô
assertWarns"unittest.case.TestCase.assertWarns®
assertWarns"unittest.case.TestCase.assertWarns"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX˜
assertWarns"unittest.case.TestCase.assertWarns"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39"3102≈
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegexé
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX›
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
expected_warningÜ
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warningz
&builtins.tuple[Type[builtins.Warning]]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39"3102Œ
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual≠
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *W
deltaJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:overloadX≈
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *c
deltaV
Union[datetime.timedelta,None](
datetime.timedelta"datetime.timedelta
None 0:overloadX"35"36"37"38"39"3102Ú
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqualÜ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any 0:overloadX⁄
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any 0:overloadXﬂ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
first 
builtins.float"builtins.float*,
second 
builtins.float"builtins.float*
msg
Any *W
deltaJ
Union[builtins.float,None] 
builtins.float"builtins.float
None 0:overloadXÀ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*1
first&
datetime.datetime"datetime.datetime*2
second&
datetime.datetime"datetime.datetime*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *c
deltaV
Union[datetime.timedelta,None](
datetime.timedelta"datetime.timedelta
None 0:overloadX"35"36"37"38"39"3102¬	
failUnlessRaises'unittest.case.TestCase.failUnlessRaises‰
failUnlessRaises'unittest.case.TestCase.failUnlessRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Õ
	exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*[
callableK
CallableType[builtins.function]&
builtins.function"builtins.function *
args
Any*
kwargs
Any0:overloadXÑ
failUnlessRaises'unittest.case.TestCase.failUnlessRaises"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˆ
	exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*
msg
Any 0:overloadX"35"36"37"38"39"3102Ñ
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp¬
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Õ
	exceptionΩ
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseExceptioní
,builtins.tuple[Type[builtins.BaseException]]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX‰
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp"p
4unittest.case._AssertRaisesContext[unittest.case._E]
unittest.case._E""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*ˆ
	exceptionÊ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]0
Type[unittest.case._E]
unittest.case._Ej
&builtins.tuple[Type[unittest.case._E]]0
Type[unittest.case._E]
unittest.case._E"builtins.tuple*Ÿ
expected_regexƒ
^Union[builtins.str,builtins.bytes,typing.Pattern[builtins.str],typing.Pattern[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesL
typing.Pattern[builtins.str]
builtins.str"builtins.str"typing.PatternR
typing.Pattern[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Pattern*
msg
Any 0:overloadX"35"36"37"38"39"310j35j36j37j38j39j310ì

TestLoaderunittest.loader.TestLoader"builtins.object*√
loadTestsFromTestCase0unittest.loader.TestLoader.loadTestsFromTestCase"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*e
testCaseClassR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*µ
loadTestsFromModule.unittest.loader.TestLoader.loadTestsFromModule"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*0
module$
types.ModuleType"types.ModuleType*
args
Any*
pattern
Any z35z36z37z38z39z310*‹
loadTestsFromName,unittest.loader.TestLoader.loadTestsFromName"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*&
name
builtins.str"builtins.str*^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None z35z36z37z38z39z310*ë
loadTestsFromNames-unittest.loader.TestLoader.loadTestsFromNames"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*Y
namesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*^
moduleP
Union[types.ModuleType,None]$
types.ModuleType"types.ModuleType
None z35z36z37z38z39z310*”
getTestCaseNames+unittest.loader.TestLoader.getTestCaseNames"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*e
testCaseClassR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*˜
discover#unittest.loader.TestLoader.discover"4
unittest.suite.TestSuite"unittest.suite.TestSuite*B
self8
unittest.loader.TestLoader"unittest.loader.TestLoader*+
	start_dir
builtins.str"builtins.str*+
pattern
builtins.str"builtins.str *Y
top_level_dirD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310j35j36j37j38j39j310à
TestProgramunittest.main.TestProgram"builtins.object*∞
__init__"unittest.main.TestProgram.__init__"
None*@
self6
unittest.main.TestProgram"unittest.main.TestProgram*â
module{
)Union[None,builtins.str,types.ModuleType]
None
builtins.str"builtins.str$
types.ModuleType"types.ModuleType *∆
defaultTest≤
6Union[builtins.str,typing.Iterable[builtins.str],None]
builtins.str"builtins.strN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *é
argvÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None *˚

testRunnerË
EUnion[Type[unittest.main._TestRunner],unittest.main._TestRunner,None][
Type[unittest.main._TestRunner]6
unittest.main._TestRunner"unittest.main._TestRunner6
unittest.main._TestRunner"unittest.main._TestRunner
None *J

testLoader8
unittest.loader.TestLoader"unittest.loader.TestLoader **
exit
builtins.bool"builtins.bool *-
	verbosity
builtins.int"builtins.int *W
failfastG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y

catchbreakG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
bufferG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *T
warningsD
Union[builtins.str,None]
builtins.str"builtins.str
None */
	tb_locals
builtins.bool"builtins.bool z35z36z37z38z39z310*©
	usageExit#unittest.main.TestProgram.usageExit"
None*@
self6
unittest.main.TestProgram"unittest.main.TestProgram*
msg
Any z35z36z37z38z39z310*Î
	parseArgs#unittest.main.TestProgram.parseArgs"
None*@
self6
unittest.main.TestProgram"unittest.main.TestProgram*T
argvJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listz35z36z37z38z39z310*à
createTests%unittest.main.TestProgram.createTests"
None*@
self6
unittest.main.TestProgram"unittest.main.TestProgramz35z36*≈
createTests%unittest.main.TestProgram.createTests"
None*@
self6
unittest.main.TestProgram"unittest.main.TestProgram*4
from_discovery
builtins.bool"builtins.bool *|
Loadern
&Union[unittest.loader.TestLoader,None]8
unittest.loader.TestLoader"unittest.loader.TestLoader
None z37z38z39z310*ì
runTests"unittest.main.TestProgram.runTests"
None*@
self6
unittest.main.TestProgram"unittest.main.TestProgramz35z36z37z38z39z310j35j36j37j38j39j310ñ,

TestResultunittest.result.TestResult"builtins.object*°
__init__#unittest.result.TestResult.__init__"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*U
streamG
Union[typing.TextIO,None]
typing.TextIO"typing.TextIO
None *[
descriptionsG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
	verbosityD
Union[builtins.int,None]
builtins.int"builtins.int
None z35z36z37z38z39z310*ú
printErrors&unittest.result.TestResult.printErrors"
None*B
self8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*∂
wasSuccessful(unittest.result.TestResult.wasSuccessful"
builtins.bool"builtins.bool*B
self8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*é
stopunittest.result.TestResult.stop"
None*B
self8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*‘
	startTest$unittest.result.TestResult.startTest"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*“
stopTest#unittest.result.TestResult.stopTest"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*û
startTestRun'unittest.result.TestResult.startTestRun"
None*B
self8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*ú
stopTestRun&unittest.result.TestResult.stopTestRun"
None*B
self8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*¨
addError#unittest.result.TestResult.addError"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCase*◊
errÕ
vTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]]Ø
kUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType7
Tuple[None,None,None]
None
None
None"unittest.result._SysExcInfoTypez35z36z37z38z39z310*∞

addFailure%unittest.result.TestResult.addFailure"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCase*◊
errÕ
vTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]]Ø
kUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType7
Tuple[None,None,None]
None
None
None"unittest.result._SysExcInfoTypez35z36z37z38z39z310*÷

addSuccess%unittest.result.TestResult.addSuccess"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*˙
addSkip"unittest.result.TestResult.addSkip"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCase*(
reason
builtins.str"builtins.strz35z36z37z38z39z310*¿
addExpectedFailure-unittest.result.TestResult.addExpectedFailure"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCase*◊
errÕ
vTypeAlias[Union[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]]Ø
kUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None]]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType7
Tuple[None,None,None]
None
None
None"unittest.result._SysExcInfoTypez35z36z37z38z39z310*Í
addUnexpectedSuccess/unittest.result.TestResult.addUnexpectedSuccess"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*‡

addSubTest%unittest.result.TestResult.addSubTest"
None*B
self8
unittest.result.TestResult"unittest.result.TestResult*:
test0
unittest.case.TestCase"unittest.case.TestCase*=
subtest0
unittest.case.TestCase"unittest.case.TestCase*»
erræ
pUnion[Tuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType],Tuple[None,None,None],None]Ñ
NTuple[Type[builtins.BaseException],builtins.BaseException,types.TracebackType]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException0
builtins.BaseException"builtins.BaseException*
types.TracebackType"types.TracebackType7
Tuple[None,None,None]
None
None
None
Nonez35z36z37z38z39z310j35j36j37j38j39j310™	
TextTestResultunittest.runner.TextTestResult"unittest.result.TestResult*≠
__init__'unittest.runner.TextTestResult.__init__"
None*J
self@
unittest.runner.TextTestResult"unittest.runner.TextTestResult**
stream
typing.TextIO"typing.TextIO*0
descriptions
builtins.bool"builtins.bool*+
	verbosity
builtins.int"builtins.intz35z36z37z38z39z310*˛
getDescription-unittest.runner.TextTestResult.getDescription"
builtins.str"builtins.str*J
self@
unittest.runner.TextTestResult"unittest.runner.TextTestResult*:
test0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310*®
printErrors*unittest.runner.TextTestResult.printErrors"
None*J
self@
unittest.runner.TextTestResult"unittest.runner.TextTestResultz35z36z37z38z39z310*Ê
printErrorList-unittest.runner.TextTestResult.printErrorList"
None*J
self@
unittest.runner.TextTestResult"unittest.runner.TextTestResult*)
flavour
builtins.str"builtins.str*ä
errors~
*Tuple[unittest.case.TestCase,builtins.str]0
unittest.case.TestCase"unittest.case.TestCase
builtins.str"builtins.strz35z36z37z38z39z310j35j36j37j38j39j310¿
TextTestRunnerunittest.runner.TextTestRunner"builtins.object*ç
__init__'unittest.runner.TextTestRunner.__init__"
None*J
self@
unittest.runner.TextTestRunner"unittest.runner.TextTestRunner*U
streamG
Union[typing.TextIO,None]
typing.TextIO"typing.TextIO
None *2
descriptions
builtins.bool"builtins.bool *-
	verbosity
builtins.int"builtins.int *.
failfast
builtins.bool"builtins.bool *,
buffer
builtins.bool"builtins.bool *ö
resultclassÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *Ç
warningsr
"Union[Type[builtins.Warning],None]@
Type[builtins.Warning]$
builtins.Warning"builtins.Warning
None */
	tb_locals
builtins.bool"builtins.bool z35z36z37z38z39z310*ÿ
_makeResult*unittest.runner.TextTestRunner._makeResult"8
unittest.result.TestResult"unittest.result.TestResult*J
self@
unittest.runner.TextTestRunner"unittest.runner.TextTestRunnerz35z36z37z38z39z310*¯
run"unittest.runner.TextTestRunner.run"8
unittest.result.TestResult"unittest.result.TestResult*J
self@
unittest.runner.TextTestRunner"unittest.runner.TextTestRunner*≠
test¢
6Union[unittest.suite.TestSuite,unittest.case.TestCase]4
unittest.suite.TestSuite"unittest.suite.TestSuite0
unittest.case.TestCase"unittest.case.TestCasez35z36z37z38z39z310j35j36j37j38j39j310∂
BaseTestSuiteunittest.suite.BaseTestSuite"typing.Iterable*ô
__init__%unittest.suite.BaseTestSuite.__init__"
None*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuite*˙
testsÏ
Rtyping.Iterable[TypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]]Ñ
ATypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]¢
6Union[unittest.case.TestCase,unittest.suite.TestSuite]0
unittest.case.TestCase"unittest.case.TestCase4
unittest.suite.TestSuite"unittest.suite.TestSuite"unittest.suite._TestType"typing.Iterable z35z36z37z38z39z310*í
__call__%unittest.suite.BaseTestSuite.__call__"8
unittest.result.TestResult"unittest.result.TestResult*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuite*D
result8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*¨
addTest$unittest.suite.BaseTestSuite.addTest"
None*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuite*è
testÑ
ATypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]¢
6Union[unittest.case.TestCase,unittest.suite.TestSuite]0
unittest.case.TestCase"unittest.case.TestCase4
unittest.suite.TestSuite"unittest.suite.TestSuite"unittest.suite._TestTypez35z36z37z38z39z310*ó
addTests%unittest.suite.BaseTestSuite.addTests"
None*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuite*¯
testsÏ
Rtyping.Iterable[TypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]]Ñ
ATypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]¢
6Union[unittest.case.TestCase,unittest.suite.TestSuite]0
unittest.case.TestCase"unittest.case.TestCase4
unittest.suite.TestSuite"unittest.suite.TestSuite"unittest.suite._TestType"typing.Iterablez35z36z37z38z39z310*à
run unittest.suite.BaseTestSuite.run"8
unittest.result.TestResult"unittest.result.TestResult*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuite*D
result8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310*ñ
debug"unittest.suite.BaseTestSuite.debug"
None*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuitez35z36z37z38z39z310*º
countTestCases+unittest.suite.BaseTestSuite.countTestCases"
builtins.int"builtins.int*F
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuitez35z36z37z38z39z310*ˇ
__iter__%unittest.suite.BaseTestSuite.__iter__"Ï
Rtyping.Iterator[TypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]]Ñ
ATypeAlias[Union[unittest.case.TestCase,unittest.suite.TestSuite]]¢
6Union[unittest.case.TestCase,unittest.suite.TestSuite]0
unittest.case.TestCase"unittest.case.TestCase4
unittest.suite.TestSuite"unittest.suite.TestSuite"unittest.suite._TestType"typing.Iterator*D
self<
unittest.suite.BaseTestSuite"unittest.suite.BaseTestSuitez35z36z37z38z39z310j35j36j37j38j39j310à
	TestSuiteunittest.suite.TestSuite"unittest.suite.BaseTestSuite*©
rununittest.suite.TestSuite.run"8
unittest.result.TestResult"unittest.result.TestResult*>
self4
unittest.suite.TestSuite"unittest.suite.TestSuite*D
result8
unittest.result.TestResult"unittest.result.TestResult*+
debug
builtins.bool"builtins.bool z35z36z37z38z39z310j35j36j37j38j39j310÷
IsolatedAsyncioTestCase+unittest.async_case.IsolatedAsyncioTestCase"unittest.case.TestCase*â

asyncSetUp6unittest.async_case.IsolatedAsyncioTestCase.asyncSetUp"N
typing.Coroutine[Any,Any,None]
Any
Any
None"typing.Coroutine*d
selfZ
+unittest.async_case.IsolatedAsyncioTestCase"+unittest.async_case.IsolatedAsyncioTestCaseHz38z39z310*è
asyncTearDown9unittest.async_case.IsolatedAsyncioTestCase.asyncTearDown"N
typing.Coroutine[Any,Any,None]
Any
Any
None"typing.Coroutine*d
selfZ
+unittest.async_case.IsolatedAsyncioTestCase"+unittest.async_case.IsolatedAsyncioTestCaseHz38z39z310* 
addAsyncCleanup;unittest.async_case.IsolatedAsyncioTestCase.addAsyncCleanup"
None*d
selfZ
+unittest.async_case.IsolatedAsyncioTestCase"+unittest.async_case.IsolatedAsyncioTestCase*U
__funcK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z39z310j38j39j310U
abstractmethodabc.abstractmethod"

abc._FuncT*
funcobj

abc._FuncTz27D
overloadtyping.overload"
	typing._F*
f
	typing._Fz27¿

skipUnlessunittest.skipUnless"
Any*
	condition
Any*x
reasonl
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicodez27∏
skipIfunittest.skipIf"
Any*
	condition
Any*x
reasonl
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicodez27]
expectedFailureunittest.expectedFailure"
unittest._FT*
func
unittest._FTz27ú
skipunittest.skip"
Any*x
reasonl
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicodez27‰
mainunittest.main",
unittest.TestProgram"unittest.TestProgram*ñ
moduleá
-Union[None,builtins.unicode,types.ModuleType]
None$
builtins.unicode"builtins.unicode$
types.ModuleType"types.ModuleType *W
defaultTestD
Union[builtins.str,None]
builtins.str"builtins.str
None *î
argvá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *Ì

testRunner⁄
AUnion[Type[unittest.TextTestRunner],unittest.TextTestRunner,None]U
Type[unittest.TextTestRunner]2
unittest.TextTestRunner"unittest.TextTestRunner2
unittest.TextTestRunner"unittest.TextTestRunner
None *<

testLoader*
unittest.TestLoader"unittest.TestLoader **
exit
builtins.bool"builtins.bool *-
	verbosity
builtins.int"builtins.int *W
failfastG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Y

catchbreakG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *U
bufferG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None z27õ

load_testsunittest.load_tests"(
unittest.TestSuite"unittest.TestSuite*6
loader*
unittest.TestLoader"unittest.TestLoader*3
tests(
unittest.TestSuite"unittest.TestSuite*]
patternP
Union[builtins.unicode,None]$
builtins.unicode"builtins.unicode
Nonez27 

load_testsunittest.load_tests"4
unittest.suite.TestSuite"unittest.suite.TestSuite*D
loader8
unittest.loader.TestLoader"unittest.loader.TestLoader*?
tests4
unittest.suite.TestSuite"unittest.suite.TestSuite*Q
patternD
Union[builtins.str,None]
builtins.str"builtins.str
Nonez35z36z37z38z39z3107
installHandlerunittest.installHandler"
Nonez27o
registerResultunittest.registerResult"
None*6
result*
unittest.TestResult"unittest.TestResultz27Å
removeResultunittest.removeResult"
builtins.bool"builtins.bool*6
result*
unittest.TestResult"unittest.TestResultz27Ü
expectedFailureunittest.case.expectedFailure"
unittest.case._FT*$
	test_item
unittest.case._FTz35z36z37z38z39z310™
skipunittest.case.skip"K
CallableType[builtins.function]&
builtins.function"builtins.function*(
reason
builtins.str"builtins.strz35z36z37z38z39z310·
skipIfunittest.case.skipIf"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz35z36z37z38z39z310È

skipUnlessunittest.case.skipUnless"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz35z36z37z38z39z310‘
getTestCaseNames unittest.loader.getTestCaseNames"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*e
testCaseClassR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase*(
prefix
builtins.str"builtins.str*¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod z35z36˙
getTestCaseNames unittest.loader.getTestCaseNames"N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*e
testCaseClassR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase*(
prefix
builtins.str"builtins.str*¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod *ö
testNamePatternsÅ
'Union[builtins.list[builtins.str],None]J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list
None z37z38z39z310Ì
	makeSuiteunittest.loader.makeSuite"4
unittest.suite.TestSuite"unittest.suite.TestSuite*e
testCaseClassR
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase**
prefix
builtins.str"builtins.str *¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod *´

suiteClassò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"unittest.loader._SuiteClass z35z36z37z38z39z310¿
findTestCasesunittest.loader.findTestCases"4
unittest.suite.TestSuite"unittest.suite.TestSuite*0
module$
types.ModuleType"types.ModuleType**
prefix
builtins.str"builtins.str *¥
	sortUsing¢
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"%unittest.loader._SortComparisonMethod *´

suiteClassò
*TypeAlias[CallableType[builtins.function]]K
CallableType[builtins.function]&
builtins.function"builtins.function"unittest.loader._SuiteClass z35z36z37z38z39z310T
installHandlerunittest.signals.installHandler"
Nonez35z36z37z38z39z310ö
registerResultunittest.signals.registerResult"
None*D
result8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310¨
removeResultunittest.signals.removeResult"
builtins.bool"builtins.bool*D
result8
unittest.result.TestResult"unittest.result.TestResultz35z36z37z38z39z310Ã
addModuleCleanupunittest.case.addModuleCleanup"
None*Y

__functionK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Anyz38z39z310"Ã
removeHandlerunittest.removeHandler?
removeHandlerunittest.removeHandler"
None0:overloadX›
removeHandlerunittest.removeHandler"K
CallableType[builtins.function]&
builtins.function"builtins.function*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.function0:overloadX"27"¶
removeHandlerunittest.signals.removeHandler_
removeHandlerunittest.signals.removeHandler"
None*
method
None 0:overloadX{
removeHandlerunittest.signals.removeHandler"
unittest.signals._F*#
method
unittest.signals._F0:overloadX"35"36"37"38"39"310*
datetimedatetime *27*
typestypes *27*9
Any
typing.Any"
builtins.object"builtins.object*27*K
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*27*d
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*E
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*27*C
Typetyping.Type*
typing._SpecialForm"typing._SpecialForm*27*E
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*27*_
defaultTestLoaderunittest.defaultTestLoader*
unittest.TestLoader"unittest.TestLoader*27*?
utilunittest.util$
types.ModuleType"types.ModuleType*27*%
syssys *35*36*37*38*39*310*â
defaultTestLoader!unittest.loader.defaultTestLoader8
unittest.loader.TestLoader"unittest.loader.TestLoader*35*36*37*38*39*310