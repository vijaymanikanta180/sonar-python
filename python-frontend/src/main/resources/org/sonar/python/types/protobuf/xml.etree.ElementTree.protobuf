
xml.etree.ElementTreeú&
IO	typing.IO"typing.Iterator*£
modetyping.IO.mode"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27z35z36z37z38z39z310*£
nametyping.IO.name"
builtins.str"builtins.str*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27z35z36z37z38z39z310*ó
closetyping.IO.close"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*©
closedtyping.IO.closed"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:property`z27z35z36z37z38z39z310*≠
filenotyping.IO.fileno"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*ó
flushtyping.IO.flush"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*Ø
isattytyping.IO.isatty"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*≈
readtyping.IO.read"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*%
n
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*≥
readabletyping.IO.readable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*—
readlinetyping.IO.readline"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*)
limit
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*Å
	readlinestyping.IO.readlines"@
builtins.list[typing.AnyStr]
typing.AnyStr"builtins.list*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
hint
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*ˇ
seektyping.IO.seek"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*(
offset
builtins.int"builtins.int**
whence
builtins.int"builtins.int 0:abstractmethod@z27z35z36z37z38z39z310*≥
seekabletyping.IO.seekable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*©
telltyping.IO.tell"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*É
truncatetyping.IO.truncate"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*P
sizeD
Union[builtins.int,None]
builtins.int"builtins.int
None 0:abstractmethod@z27z35z36z37z38z39z310*≥
writabletyping.IO.writable"
builtins.bool"builtins.bool*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*≈
writetyping.IO.write"
builtins.int"builtins.int*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*
s
typing.AnyStr0:abstractmethod@z27z35z36z37z38z39z310*Ú

writelinestyping.IO.writelines"
None*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*O
linesD
typing.Iterable[typing.AnyStr]
typing.AnyStr"typing.Iterable0:abstractmethod@z27z35z36z37z38z39z310*Ö
nexttyping.IO.next"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27*◊
__iter__typing.IO.__iter__"D
typing.Iterator[typing.AnyStr]
typing.AnyStr"typing.Iterator*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*Õ
	__enter__typing.IO.__enter__"8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z27z35z36z37z38z39z310*¬
__exit__typing.IO.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*@
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO*ê
tä
(Union[Type[builtins.BaseException],None]R
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException
None*k
valueb
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*f
	tracebackY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None0:abstractmethod@z27z35z36z37z38z39z310*¢
__next__typing.IO.__next__"
typing.AnyStr*B
self8
typing.IO[typing.AnyStr]
typing.AnyStr"	typing.IO0:abstractmethod@z35z36z37z38z39z310Pj27j35j36j37j38j39j310ó
	Generatortyping.Generator"typing.Iterator*ﬂ
nexttyping.Generator.next"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:abstractmethod@z27*ô
sendtyping.Generator.send"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*
__value
typing._T_contra0:abstractmethod@z27z35z36z37z38z39z310*Ÿ
closetyping.Generator.close"
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:abstractmethod@z27*⁄
closetyping.Generator.close"
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generatorz35z36z37z38z39z310*à
gi_codetyping.Generator.gi_code" 
types.CodeType"types.CodeType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z27z35z36z37z38z39z310*å
gi_frametyping.Generator.gi_frame""
types.FrameType"types.FrameType*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z27z35z36z37z38z39z310*å

gi_runningtyping.Generator.gi_running"
builtins.bool"builtins.bool*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z27z35z36z37z38z39z310*Ë
__next__typing.Generator.__next__"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generatorz35z36z37z38z39z310*·
__iter__typing.Generator.__iter__"ä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*ì
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generatorz35z36z37z38z39z310*Ù
gi_yieldfromtyping.Generator.gi_yieldfrom"Ö
)Union[typing.Generator[Any,Any,Any],None]L
typing.Generator[Any,Any,Any]
Any
Any
Any"typing.Generator
None*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator0:property`z35z36z37z38z39z3102°
throwtyping.Generator.throw¡
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*[
__typR
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException*ì
__valá
-Union[builtins.BaseException,builtins.object]0
builtins.BaseException"builtins.BaseException"
builtins.object"builtins.object *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@Xû
throwtyping.Generator.throw"
typing._T_co*ï
selfä
<typing.Generator[typing._T_co,typing._T_contra,typing._V_co]
typing._T_co
typing._T_contra
typing._V_co"typing.Generator*9
__typ0
builtins.BaseException"builtins.BaseException*
__val
None *c
__tbY
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
None 0:overload:abstractmethod@X"27"35"36"37"38"39"310Pj27j35j36j37j38j39j310Û#
	ItemsViewtyping.ItemsView"typing.MappingView"typing.AbstractSet*±
__init__typing.ItemsView.__init__"
None*q
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*p
mappingc
+typing.Mapping[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Mappingz27z35z36z37z38z39z310*Ñ
__contains__typing.ItemsView.__contains__"
builtins.bool"builtins.bool*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*'
o"
builtins.object"builtins.objectz27z35z36z37z38z39z310* 
__iter__typing.ItemsView.__iter__"î
3typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Iterator*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsViewz27z35z36z37z38z39z310*ı
__and__typing.ItemsView.__and__"é
0builtins.set[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*5
o0
typing.Iterable[Any]
Any"typing.Iterablez35z36z37z38z39z310*™
__rand__typing.ItemsView.__rand__"6
builtins.set[typing._T]
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*Ÿ
__or__typing.ItemsView.__or__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*€
__ror__typing.ItemsView.__ror__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*ı
__sub__typing.ItemsView.__sub__"é
0builtins.set[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*5
o0
typing.Iterable[Any]
Any"typing.Iterablez35z36z37z38z39z310*™
__rsub__typing.ItemsView.__rsub__"6
builtins.set[typing._T]
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*€
__xor__typing.ItemsView.__xor__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*›
__rxor__typing.ItemsView.__rxor__"Ë
Abuiltins.set[Union[Tuple[typing._KT_co,typing._VT_co],typing._T]]î
3Union[Tuple[typing._KT_co,typing._VT_co],typing._T]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co
	typing._T"builtins.set*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*¬
__reversed__typing.ItemsView.__reversed__"î
3typing.Iterator[Tuple[typing._KT_co,typing._VT_co]]L
"Tuple[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Iterator*o
selfg
-typing.ItemsView[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.ItemsViewz38z39z310Pj27j35j36j37j38j39j310∑
Iterabletyping.Iterable"builtins.object*Â
__iter__typing.Iterable.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterable[typing._T_co]
typing._T_co"typing.Iterable0:abstractmethod@z27z35z36z37z38z39z3108PXj27j35j36j37j38j39j310Ó
Iteratortyping.Iterator"typing.Iterable*î
nexttyping.Iterator.next"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@z27*—
__iter__typing.Iterator.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iteratorz27z35z36z37z38z39z310*±
__next__typing.Iterator.__next__"
typing._T_co*L
selfB
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator0:abstractmethod@z35z36z37z38z39z3108PXj27j35j36j37j38j39j310ƒ
KeysViewtyping.KeysView"typing.MappingView"typing.AbstractSet*Ù
__init__typing.KeysView.__init__"
None*N
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*p
mappingc
+typing.Mapping[typing._KT_co,typing._VT_co]
typing._KT_co
typing._VT_co"typing.Mappingz27*ı
__init__typing.KeysView.__init__"
None*N
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*\
mappingO
!typing.Mapping[typing._KT_co,Any]
typing._KT_co
Any"typing.Mappingz35z36z37z38z39z310*‡
__contains__typing.KeysView.__contains__"
builtins.bool"builtins.bool*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*'
o"
builtins.object"builtins.objectz27z35z36z37z38z39z310*’
__iter__typing.KeysView.__iter__"D
typing.Iterator[typing._KT_co]
typing._KT_co"typing.Iterator*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysViewz27z35z36z37z38z39z310*Ä
__and__typing.KeysView.__and__">
builtins.set[typing._KT_co]
typing._KT_co"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*5
o0
typing.Iterable[Any]
Any"typing.Iterablez35z36z37z38z39z310*Ü
__rand__typing.KeysView.__rand__"6
builtins.set[typing._T]
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*œ
__or__typing.KeysView.__or__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*—
__ror__typing.KeysView.__ror__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*Ä
__sub__typing.KeysView.__sub__">
builtins.set[typing._KT_co]
typing._KT_co"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*5
o0
typing.Iterable[Any]
Any"typing.Iterablez35z36z37z38z39z310*Ü
__rsub__typing.KeysView.__rsub__"6
builtins.set[typing._T]
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*—
__xor__typing.KeysView.__xor__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*”
__rxor__typing.KeysView.__rxor__"Ç
,builtins.set[Union[typing._KT_co,typing._T]]D
Union[typing._KT_co,typing._T]
typing._KT_co
	typing._T"builtins.set*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysView*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*Õ
__reversed__typing.KeysView.__reversed__"D
typing.Iterator[typing._KT_co]
typing._KT_co"typing.Iterator*L
selfD
typing.KeysView[typing._KT_co]
typing._KT_co"typing.KeysViewz38z39z310Pj27j35j36j37j38j39j310∞!
MutableSequencetyping.MutableSequence"typing.Sequence*„
inserttyping.MutableSequence.insert"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*'
index
builtins.int"builtins.int*
object
	typing._T0:abstractmethod@z27*˜
inserttyping.MutableSequence.insert"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*'
index
builtins.int"builtins.int*
value
	typing._T0:abstractmethod@z35z36z37z38z39z310*¶
appendtyping.MutableSequence.append"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
object
	typing._Tz27*∫
appendtyping.MutableSequence.append"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
value
	typing._Tz35z36z37z38z39z310*◊
extendtyping.MutableSequence.extend"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*J
iterable<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez27*Í
extendtyping.MutableSequence.extend"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*H
values<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez35z36z37z38z39z310*¶
reversetyping.MutableSequence.reverse"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequencez27z35z36z37z38z39z310*Œ
poptyping.MutableSequence.pop"
	typing._T*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*)
index
builtins.int"builtins.int z27z35z36z37z38z39z310*¶
removetyping.MutableSequence.remove"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
object
	typing._Tz27*∫
removetyping.MutableSequence.remove"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*
value
	typing._Tz35z36z37z38z39z310*´
__iadd__typing.MutableSequence.__iadd__"J
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*A
x<
typing.Iterable[typing._T]
	typing._T"typing.Iterablez27z35z36z37z38z39z310*û
cleartyping.MutableSequence.clear"
None*T
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequencez35z36z37z38z39z3102√
__getitem__"typing.MutableSequence.__getitem__◊
__getitem__"typing.MutableSequence.__getitem__"
	typing._T*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@Xò
__getitem__"typing.MutableSequence.__getitem__"J
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27"35"36"37"38"39"3102”
__setitem__"typing.MutableSequence.__setitem__Ê
__setitem__"typing.MutableSequence.__setitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*!
i
builtins.int"builtins.int*
o
	typing._T0:overload:abstractmethod@Xô
__setitem__"typing.MutableSequence.__setitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*%
s 
builtins.slice"builtins.slice*A
o<
typing.Iterable[typing._T]
	typing._T"typing.Iterable0:overload:abstractmethod@X"27"35"36"37"38"39"3102¸
__delitem__"typing.MutableSequence.__delitem__“
__delitem__"typing.MutableSequence.__delitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@X÷
__delitem__"typing.MutableSequence.__delitem__"
None*R
selfJ
!typing.MutableSequence[typing._T]
	typing._T"typing.MutableSequence*%
i 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27"35"36"37"38"39"310Pj27j35j36j37j38j39j310â
Sequencetyping.Sequence"typing.Iterable"typing.Container"typing.Reversible*û
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*û
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
x
Anyz27*≈
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz27*∏
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*¿
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez27*§
__len__typing.Sequence.__len__"
builtins.int"builtins.int*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence0:abstractmethod@z272Ä
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"27Pj27¬
Sequencetyping.Sequence"typing.Collection"typing.Reversible*å
indextyping.Sequence.index"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Any*)
start
builtins.int"builtins.int *(
stop
builtins.int"builtins.int z35z36z37z38z39z310*∑
counttyping.Sequence.count"
builtins.int"builtins.int*L
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*
value
Anyz35z36z37z38z39z310*⁄
__contains__typing.Sequence.__contains__"
builtins.bool"builtins.bool*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*'
x"
builtins.object"builtins.objectz35z36z37z38z39z310*Õ
__iter__typing.Sequence.__iter__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z310*’
__reversed__typing.Sequence.__reversed__"B
typing.Iterator[typing._T_co]
typing._T_co"typing.Iterator*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequencez35z36z37z38z39z3102ï
__getitem__typing.Sequence.__getitem__À
__getitem__typing.Sequence.__getitem__"
typing._T_co*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*!
i
builtins.int"builtins.int0:overload:abstractmethod@XÅ
__getitem__typing.Sequence.__getitem__"B
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*J
selfB
typing.Sequence[typing._T_co]
typing._T_co"typing.Sequence*%
s 
builtins.slice"builtins.slice0:overload:abstractmethod@X"35"36"37"38"39"310Pj35j36j37j38j39j310…
TypeVartyping.TypeVar"builtins.object*ﬁ
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*H
bound;
Union[Type[Any],None]
	Type[Any]
Any
None */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z27*û
__init__typing.TypeVar.__init__"
None**
self 
typing.TypeVar"typing.TypeVar*&
name
builtins.str"builtins.str*'
constraints
	Type[Any]
Any*s
boundf
"Union[None,Type[Any],builtins.str]
None
	Type[Any]
Any
builtins.str"builtins.str */
	covariant
builtins.bool"builtins.bool *3
contravariant
builtins.bool"builtins.bool z35z36z37z38z39z310j27j35j36j37j38j39j310a

ParseError xml.etree.ElementTree.ParseError"builtins.SyntaxErrorj27j35j36j37j38j39j310Ø•
Elementxml.etree.ElementTree.Element"typing.MutableSequence*ì

__init__&xml.etree.ElementTree.Element.__init__"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*ˇ
tagı
VUnion[TypeAlias[Union[builtins.str,builtins.unicode]],CallableType[builtins.function]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeK
CallableType[builtins.function]&
builtins.function"builtins.function*™
attribõ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict *◊
extraÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typez27*˝
__init__&xml.etree.ElementTree.Element.__init__"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*¨
tag¢
3Union[builtins.str,CallableType[builtins.function]]
builtins.str"builtins.strK
CallableType[builtins.function]&
builtins.function"builtins.function*É
attribu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict *'
extra
builtins.str"builtins.strz35z36z37z38z39z310*Ô
append$xml.etree.ElementTree.Element.append"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*N
__subelement>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27z35z36z37z38z39z310*ù
clear#xml.etree.ElementTree.Element.clear"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27z35z36z37z38z39z310*≤
extend$xml.etree.ElementTree.Element.extend"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*ê

__elementsÅ
.typing.Iterable[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"typing.Iterablez27z35z36z37z38z39z310*Ü	
find"xml.etree.ElementTree.Element.find"w
)Union[xml.etree.ElementTree.Element,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None z27*˝
find"xml.etree.ElementTree.Element.find"w
)Union[xml.etree.ElementTree.Element,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*&
path
builtins.str"builtins.str*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None z35z36z37z38z39z310*í	
findall%xml.etree.ElementTree.Element.findall"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None z27*â
findall%xml.etree.ElementTree.Element.findall"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*&
path
builtins.str"builtins.str*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None z35z36z37z38z39z310*¸
insert$xml.etree.ElementTree.Element.insert"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*'
__index
builtins.int"builtins.int*K
	__element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27*î
insert$xml.etree.ElementTree.Element.insert"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*'
__index
builtins.int"builtins.int*N
__subelement>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz35z36z37z38z39z310* 
items#xml.etree.ElementTree.Element.items"Õ
/typing.ItemsView[TypeAlias[Any],TypeAlias[Any]]C
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_typeC
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type"typing.ItemsView*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27*å
items#xml.etree.ElementTree.Element.items"{
+typing.ItemsView[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"typing.ItemsView*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz35z36z37z38z39z310*•
iter"xml.etree.ElementTree.Element.iter"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*Ü
tag{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27*Ç
iter"xml.etree.ElementTree.Element.iter"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*O
tagD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310*π	
iterfind&xml.etree.ElementTree.Element.iterfind"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None z27*∞
iterfind&xml.etree.ElementTree.Element.iterfind"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*&
path
builtins.str"builtins.str*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None z35z36z37z38z39z310*ö
itertext&xml.etree.ElementTree.Element.itertext"ó
*typing.Generator[TypeAlias[Any],None,None]C
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type
None
None"typing.Generator*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27*Ö
itertext&xml.etree.ElementTree.Element.itertext"n
(typing.Generator[builtins.str,None,None]
builtins.str"builtins.str
None
None"typing.Generator*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz35z36z37z38z39z310*Ò
keys"xml.etree.ElementTree.Element.keys"w
typing.KeysView[TypeAlias[Any]]C
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type"typing.KeysView*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27*›
keys"xml.etree.ElementTree.Element.keys"N
typing.KeysView[builtins.str]
builtins.str"builtins.str"typing.KeysView*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz35z36z37z38z39z310*…
makeelement)xml.etree.ElementTree.Element.makeelement">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*’
__tagÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*®
__attribõ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dictz27*Ü
makeelement)xml.etree.ElementTree.Element.makeelement">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
__tag
builtins.str"builtins.str*Å
__attribu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dictz35z36z37z38z39z310*Ô
remove$xml.etree.ElementTree.Element.remove"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*N
__subelement>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27z35z36z37z38z39z310*≤
set!xml.etree.ElementTree.Element.set"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*’
__keyÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*◊
__valueÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typez27*Â
set!xml.etree.ElementTree.Element.set"
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
__key
builtins.str"builtins.str*'
__value
builtins.str"builtins.strz35z36z37z38z39z310*î
__delitem__)xml.etree.ElementTree.Element.__delitem__"
None*F
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*k
if
"Union[builtins.int,builtins.slice]
builtins.int"builtins.int 
builtins.slice"builtins.slicez27z35z36z37z38z39z310*≥
__len__%xml.etree.ElementTree.Element.__len__"
builtins.int"builtins.int*F
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27z35z36z37z38z39z310*ï
getchildren)xml.etree.ElementTree.Element.getchildren"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27z35z36z37z38*é
getiterator)xml.etree.ElementTree.Element.getiterator"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*Ü
tag{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27*‚
getiterator)xml.etree.ElementTree.Element.getiterator"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*O
tagD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z382˛
findtext&xml.etree.ElementTree.Element.findtext‡
findtext&xml.etree.ElementTree.Element.findtext"&
Union[Any,None]
Any
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*
default
None *π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None 0:overloadX‚	
findtext&xml.etree.ElementTree.Element.findtext"ï
.Union[xml.etree.ElementTree._T,TypeAlias[Any]]
xml.etree.ElementTree._TC
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*)
default
xml.etree.ElementTree._T*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None 0:overloadX"272À
findtext&xml.etree.ElementTree.Element.findtext‡
findtext&xml.etree.ElementTree.Element.findtext"D
Union[builtins.str,None]
builtins.str"builtins.str
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*&
path
builtins.str"builtins.str*
default
None *Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None 0:overloadXö
findtext&xml.etree.ElementTree.Element.findtext"l
,Union[xml.etree.ElementTree._T,builtins.str]
xml.etree.ElementTree._T
builtins.str"builtins.str*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*&
path
builtins.str"builtins.str*)
default
xml.etree.ElementTree._T*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None 0:overloadX"35"36"37"38"39"3102Ê
get!xml.etree.ElementTree.Element.getô
get!xml.etree.ElementTree.Element.get"&
Union[Any,None]
Any
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*’
keyÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*
default
None 0:overloadXõ
get!xml.etree.ElementTree.Element.get"ï
.Union[TypeAlias[Any],xml.etree.ElementTree._T]C
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type
xml.etree.ElementTree._T*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*’
keyÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*)
default
xml.etree.ElementTree._T0:overloadX"272ç
get!xml.etree.ElementTree.Element.getÜ
get!xml.etree.ElementTree.Element.get"D
Union[builtins.str,None]
builtins.str"builtins.str
None*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
key
builtins.str"builtins.str*
default
None 0:overloadX¿
get!xml.etree.ElementTree.Element.get"l
,Union[builtins.str,xml.etree.ElementTree._T]
builtins.str"builtins.str
xml.etree.ElementTree._T*H
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
key
builtins.str"builtins.str*)
default
xml.etree.ElementTree._T0:overloadX"35"36"37"38"39"3102ì
__getitem__)xml.etree.ElementTree.Element.__getitem__Ò
__getitem__)xml.etree.ElementTree.Element.__getitem__">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*F
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*!
i
builtins.int"builtins.int0:overloadX«
__getitem__)xml.etree.ElementTree.Element.__getitem__"è
5typing.MutableSequence[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"typing.MutableSequence*F
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
s 
builtins.slice"builtins.slice0:overloadX"27"35"36"37"38"39"3102§
__setitem__)xml.etree.ElementTree.Element.__setitem__Ä
__setitem__)xml.etree.ElementTree.Element.__setitem__"
None*F
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*!
i
builtins.int"builtins.int*C
o>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element0:overloadX…
__setitem__)xml.etree.ElementTree.Element.__setitem__"
None*F
self>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
s 
builtins.slice"builtins.slice*á
oÅ
.typing.Iterable[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"typing.Iterable0:overloadX"27"35"36"37"38"39"310j27j35j36j37j38j39j310ﬁ
QNamexml.etree.ElementTree.QName"builtins.object*Ì
__init__$xml.etree.ElementTree.QName.__init__"
None*D
self:
xml.etree.ElementTree.QName"xml.etree.ElementTree.QName*›
text_or_uriÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*Ü
tag{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27*ô
__init__$xml.etree.ElementTree.QName.__init__"
None*D
self:
xml.etree.ElementTree.QName"xml.etree.ElementTree.QName*-
text_or_uri
builtins.str"builtins.str*O
tagD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310j27j35j36j37j38j39j310≥â
ElementTree!xml.etree.ElementTree.ElementTree"builtins.object*ﬂ
__init__*xml.etree.ElementTree.ElementTree.__init__"
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*Ü
elementw
)Union[xml.etree.ElementTree.Element,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None *Ω
file∞
8Union[builtins.unicode,builtins.int,typing.IO[Any],None]$
builtins.unicode"builtins.unicode
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO
None z27*Â
__init__*xml.etree.ElementTree.ElementTree.__init__"
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*Ü
elementw
)Union[xml.etree.ElementTree.Element,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None *Æ
file°
yUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],builtins.int,typing.IO[Any],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO
None z35z36z37z38z39z310*„
getroot)xml.etree.ElementTree.ElementTree.getroot">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTreez27z35z36z37z38z39z310*Û
parse'xml.etree.ElementTree.ElementTree.parse">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*ú
sourceè
>TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]°
3Union[builtins.unicode,builtins.int,typing.IO[Any]]$
builtins.unicode"builtins.unicode
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"'xml.etree.ElementTree._file_or_filename*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z27*∑	
parse'xml.etree.ElementTree.ElementTree.parse">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*À
sourceæ
ëTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]à
ÜUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"xml.etree.ElementTree._File*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310*±
iter&xml.etree.ElementTree.ElementTree.iter"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*Ü
tag{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27*é
iter&xml.etree.ElementTree.ElementTree.iter"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*O
tagD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310*ö
getiterator-xml.etree.ElementTree.ElementTree.getiterator"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*Ü
tag{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27*Ó
getiterator-xml.etree.ElementTree.ElementTree.getiterator"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*O
tagD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38*í	
find&xml.etree.ElementTree.ElementTree.find"w
)Union[xml.etree.ElementTree.Element,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None z27*â
find&xml.etree.ElementTree.ElementTree.find"w
)Union[xml.etree.ElementTree.Element,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*&
path
builtins.str"builtins.str*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None z35z36z37z38z39z310*û	
findall)xml.etree.ElementTree.ElementTree.findall"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None z27*ï
findall)xml.etree.ElementTree.ElementTree.findall"}
,builtins.list[xml.etree.ElementTree.Element]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.list*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*&
path
builtins.str"builtins.str*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None z35z36z37z38z39z310*≈	
iterfind*xml.etree.ElementTree.ElementTree.iterfind"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None z27*º
iterfind*xml.etree.ElementTree.ElementTree.iterfind"°
9typing.Generator[xml.etree.ElementTree.Element,None,None]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element
None
None"typing.Generator*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*&
path
builtins.str"builtins.str*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None z35z36z37z38z39z310*⁄
write'xml.etree.ElementTree.ElementTree.write"
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*¶
file_or_filenameè
>TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]°
3Union[builtins.unicode,builtins.int,typing.IO[Any]]$
builtins.unicode"builtins.unicode
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"'xml.etree.ElementTree._file_or_filename*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *î
default_namespace{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None z27*¢
write'xml.etree.ElementTree.ElementTree.write"
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*’
file_or_filenameæ
ëTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]à
ÜUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"xml.etree.ElementTree._File*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool z35z36z37z38z39z310*∑

write_c14n,xml.etree.ElementTree.ElementTree.write_c14n"
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*ö
fileè
>TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]°
3Union[builtins.unicode,builtins.int,typing.IO[Any]]$
builtins.unicode"builtins.unicode
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"'xml.etree.ElementTree._file_or_filenamez27*˚

write_c14n,xml.etree.ElementTree.ElementTree.write_c14n"
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*…
fileæ
ëTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]à
ÜUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"xml.etree.ElementTree._Filez35z36z37z38z39z3102ö
findtext*xml.etree.ElementTree.ElementTree.findtextÏ
findtext*xml.etree.ElementTree.ElementTree.findtext"&
Union[Any,None]
Any
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*
default
None *π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None 0:overloadXÓ	
findtext*xml.etree.ElementTree.ElementTree.findtext"ï
.Union[xml.etree.ElementTree._T,TypeAlias[Any]]
xml.etree.ElementTree._TC
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*÷
pathÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*)
default
xml.etree.ElementTree._T*π

namespaces¶
zUnion[builtins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]],None]õ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict
None 0:overloadX"272Á
findtext*xml.etree.ElementTree.ElementTree.findtextÏ
findtext*xml.etree.ElementTree.ElementTree.findtext"D
Union[builtins.str,None]
builtins.str"builtins.str
None*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*&
path
builtins.str"builtins.str*
default
None *Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None 0:overloadX¶
findtext*xml.etree.ElementTree.ElementTree.findtext"l
,Union[xml.etree.ElementTree._T,builtins.str]
xml.etree.ElementTree._T
builtins.str"builtins.str*P
selfF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*&
path
builtins.str"builtins.str*)
default
xml.etree.ElementTree._T*Ã

namespacesπ
4Union[builtins.dict[builtins.str,builtins.str],None]u
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict
None 0:overloadX"35"36"37"38"39"310j27j35j36j37j38j39j310€
TreeBuilder!xml.etree.ElementTree.TreeBuilder"builtins.object*–
__init__*xml.etree.ElementTree.TreeBuilder.__init__"
None*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*û
element_factoryÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None z27z35z36z37z38z39z310*ﬂ
close'xml.etree.ElementTree.TreeBuilder.close">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilderz27z35z36z37z38z39z310*Á
data&xml.etree.ElementTree.TreeBuilder.data"
None*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*÷
__dataÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_typez27*ï
data&xml.etree.ElementTree.TreeBuilder.data"
None*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*p
__dataf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz35z36z37z38z39z310*»
start'xml.etree.ElementTree.TreeBuilder.start">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*’
__tagÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_type*ß
__attrsõ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_type"builtins.dictz27*ê
start'xml.etree.ElementTree.TreeBuilder.start">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*o
__tagf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes*¡
__attrsµ
Tbuiltins.dict[Union[builtins.str,builtins.bytes],Union[builtins.str,builtins.bytes]]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes"builtins.dictz35z36z37z38z39z310*ö
end%xml.etree.ElementTree.TreeBuilder.end">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*’
__tagÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_typez27*»
end%xml.etree.ElementTree.TreeBuilder.end">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
selfF
!xml.etree.ElementTree.TreeBuilder"!xml.etree.ElementTree.TreeBuilder*o
__tagf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz35z36z37z38z39z310j27j35j36j37j38j39j310Ã
	XMLParserxml.etree.ElementTree.XMLParser"builtins.object*≥
__init__(xml.etree.ElementTree.XMLParser.__init__"
None*L
selfB
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser*(
html
builtins.int"builtins.int *
target
Any *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z27z35z36z37*Ü
__init__(xml.etree.ElementTree.XMLParser.__init__"
None*L
selfB
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser*
target
Any *T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310*ï
doctype'xml.etree.ElementTree.XMLParser.doctype"
None*L
selfB
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser*&
__name
builtins.str"builtins.str*'
__pubid
builtins.str"builtins.str*(
__system
builtins.str"builtins.strz27z35z36z37*¢
close%xml.etree.ElementTree.XMLParser.close"
Any*L
selfB
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParserz27z35z36z37z38z39z310*·
feed$xml.etree.ElementTree.XMLParser.feed"
None*L
selfB
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser*÷
__dataÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_typez27*è
feed$xml.etree.ElementTree.XMLParser.feed"
None*L
selfB
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser*p
__dataf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesz35z36z37z38z39z310j27j35j36j37j38j39j310≠
SupportsWrite_typeshed.SupportsWrite"builtins.object*‘
write_typeshed.SupportsWrite.write"
Any*j
self`
,_typeshed.SupportsWrite[_typeshed._T_contra]
_typeshed._T_contra"_typeshed.SupportsWrite*
__s
_typeshed._T_contraz35z36z37z38z39z310PXj35j36j37j38j39j310ﬁ

XMLPullParser#xml.etree.ElementTree.XMLPullParser"builtins.object*Ÿ
__init__,xml.etree.ElementTree.XMLPullParser.__init__"
None*T
selfJ
#xml.etree.ElementTree.XMLPullParser"#xml.etree.ElementTree.XMLPullParser*ñ
eventsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *å
_parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310*’
feed(xml.etree.ElementTree.XMLPullParser.feed"
None*T
selfJ
#xml.etree.ElementTree.XMLPullParser"#xml.etree.ElementTree.XMLPullParser**
data 
builtins.bytes"builtins.bytesz35z36z37z38z39z310*´
close)xml.etree.ElementTree.XMLPullParser.close"
None*T
selfJ
#xml.etree.ElementTree.XMLPullParser"#xml.etree.ElementTree.XMLPullParserz35z36z37z38z39z310*õ
read_events/xml.etree.ElementTree.XMLPullParser.read_events"Î
Btyping.Iterator[Tuple[builtins.str,xml.etree.ElementTree.Element]]ì
1Tuple[builtins.str,xml.etree.ElementTree.Element]
builtins.str"builtins.str>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"typing.Iterator*T
selfJ
#xml.etree.ElementTree.XMLPullParser"#xml.etree.ElementTree.XMLPullParserz35z36z37z38z39z310j35j36j37j38j39j310Ü	
C14NWriterTarget&xml.etree.ElementTree.C14NWriterTarget"builtins.object*´
__init__/xml.etree.ElementTree.C14NWriterTarget.__init__"
None*Z
selfP
&xml.etree.ElementTree.C14NWriterTarget"&xml.etree.ElementTree.C14NWriterTarget*V
writeK
CallableType[builtins.function]&
builtins.function"builtins.function*3
with_comments
builtins.bool"builtins.bool *0

strip_text
builtins.bool"builtins.bool *6
rewrite_prefixes
builtins.bool"builtins.bool *†
qname_aware_tagsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *°
qname_aware_attrsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ù
exclude_attrsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ú
exclude_tagsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None z38z39z310j38j39j310D
overloadtyping.overload"
	typing._F*
f
	typing._Fz27\
overloadtyping.overload"
	typing._F*
func
	typing._Fz35z36z37z38z39z310ö
	iselementxml.etree.ElementTree.iselement"
builtins.bool"builtins.bool*/
element"
builtins.object"builtins.objectz27z35z36z37z38z39z310ù	

SubElement xml.etree.ElementTree.SubElement">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*J
parent>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*’
tagÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*™
attribõ
nbuiltins.dict[TypeAlias[Union[builtins.str,builtins.unicode]],TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typeÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type"builtins.dict *◊
extraÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typez27©

SubElement xml.etree.ElementTree.SubElement">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*J
parent>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*%
tag
builtins.str"builtins.str*É
attribu
(builtins.dict[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str"builtins.dict *'
extra
builtins.str"builtins.strz35z36z37z38z39z310ˆ
Commentxml.etree.ElementTree.Comment">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*á
text{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27”
Commentxml.etree.ElementTree.Comment">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*P
textD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310Ì
ProcessingInstruction+xml.etree.ElementTree.ProcessingInstruction">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*ÿ
targetÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*á
text{
)Union[builtins.str,builtins.unicode,None]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode
None z27ô
ProcessingInstruction+xml.etree.ElementTree.ProcessingInstruction">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*(
target
builtins.str"builtins.str*P
textD
Union[builtins.str,None]
builtins.str"builtins.str
None z35z36z37z38z39z310ˇ
register_namespace(xml.etree.ElementTree.register_namespace"
None*ÿ
prefixÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_type*’
uriÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._str_argument_typez27≤
register_namespace(xml.etree.ElementTree.register_namespace"
None*(
prefix
builtins.str"builtins.str*%
uri
builtins.str"builtins.strz35z36z37z38z39z310√
tostringxml.etree.ElementTree.tostring"
builtins.str"builtins.str*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None z27˘
tostringlist"xml.etree.ElementTree.tostringlist"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*T
encodingD
Union[builtins.str,None]
builtins.str"builtins.str
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None z27ì
dumpxml.etree.ElementTree.dump"
None*H
elem>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Elementz27z35z36z37z38z39z310ù
parsexml.etree.ElementTree.parse"F
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*ú
sourceè
>TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]°
3Union[builtins.unicode,builtins.int,typing.IO[Any]]$
builtins.unicode"builtins.unicode
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"'xml.etree.ElementTree._file_or_filename*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z27·
parsexml.etree.ElementTree.parse"F
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*À
sourceæ
ëTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]à
ÜUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"xml.etree.ElementTree._File*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310˜
	iterparsexml.etree.ElementTree.iterparse"
(typing.Iterator[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterator*ú
sourceè
>TypeAlias[Union[builtins.unicode,builtins.int,typing.IO[Any]]]°
3Union[builtins.unicode,builtins.int,typing.IO[Any]]$
builtins.unicode"builtins.unicode
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"'xml.etree.ElementTree._file_or_filename*ñ
eventsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z27ª

	iterparsexml.etree.ElementTree.iterparse"
(typing.Iterator[Tuple[builtins.str,Any]]B
Tuple[builtins.str,Any]
builtins.str"builtins.str
Any"typing.Iterator*À
sourceæ
ëTypeAlias[Union[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]]à
ÜUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],builtins.int,typing.IO[Any]]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO"xml.etree.ElementTree._File*ñ
eventsá
)Union[typing.Sequence[builtins.str],None]N
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence
None *ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310À
XMLxml.etree.ElementTree.XML">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*÷
textÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_type*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z27˘
XMLxml.etree.ElementTree.XML">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*p
textf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310ä
XMLIDxml.etree.ElementTree.XMLID"¯
`Tuple[xml.etree.ElementTree.Element,builtins.dict[TypeAlias[Any],xml.etree.ElementTree.Element]]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element—
;builtins.dict[TypeAlias[Any],xml.etree.ElementTree.Element]C
TypeAlias[Any]
Any"&xml.etree.ElementTree._str_result_type>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.dict*÷
textÀ
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_type*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z27ç
XMLIDxml.etree.ElementTree.XMLID"Õ
^Tuple[xml.etree.ElementTree.Element,builtins.dict[builtins.str,xml.etree.ElementTree.Element]]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element®
9builtins.dict[builtins.str,xml.etree.ElementTree.Element]
builtins.str"builtins.str>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element"builtins.dict*p
textf
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310ª
fromstringlist$xml.etree.ElementTree.fromstringlist">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*∞
sequence°
@typing.Sequence[TypeAlias[Union[builtins.str,builtins.unicode]]]À
/TypeAlias[Union[builtins.str,builtins.unicode]]l
$Union[builtins.str,builtins.unicode]
builtins.str"builtins.str$
builtins.unicode"builtins.unicode"(xml.etree.ElementTree._parser_input_type"typing.Sequence*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z27›
fromstringlist$xml.etree.ElementTree.fromstringlist">
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*Ω
sequenceÆ
3typing.Sequence[Union[builtins.str,builtins.bytes]]f
"Union[builtins.str,builtins.bytes]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes"typing.Sequence*ã
parser}
+Union[xml.etree.ElementTree.XMLParser,None]B
xml.etree.ElementTree.XMLParser"xml.etree.ElementTree.XMLParser
None z35z36z37z38z39z310Ô
indentxml.etree.ElementTree.indent"
None*›
tree“
FUnion[xml.etree.ElementTree.Element,xml.etree.ElementTree.ElementTree]>
xml.etree.ElementTree.Element"xml.etree.ElementTree.ElementF
!xml.etree.ElementTree.ElementTree"!xml.etree.ElementTree.ElementTree*)
space
builtins.str"builtins.str *)
level
builtins.int"builtins.int z39z310"‘
tostringxml.etree.ElementTree.tostring—
tostringxml.etree.ElementTree.tostring" 
builtins.bytes"builtins.bytes*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*
encoding
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX˙
tostringxml.etree.ElementTree.tostring"
builtins.str"builtins.str*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*E
encoding7
Literal[builtins.str]	
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX 
tostringxml.etree.ElementTree.tostring"
Any*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element**
encoding
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX"35"36"37"í
tostringxml.etree.ElementTree.tostringê
tostringxml.etree.ElementTree.tostring" 
builtins.bytes"builtins.bytes*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*
encoding
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadXπ
tostringxml.etree.ElementTree.tostring"
builtins.str"builtins.str*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*E
encoding7
Literal[builtins.str]	
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadXâ
tostringxml.etree.ElementTree.tostring"
Any*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element**
encoding
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX"38"39"310"˜	
tostringlist"xml.etree.ElementTree.tostringlistâ
tostringlist"xml.etree.ElementTree.tostringlist"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*
encoding
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX∞
tostringlist"xml.etree.ElementTree.tostringlist"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*E
encoding7
Literal[builtins.str]	
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX˜
tostringlist"xml.etree.ElementTree.tostringlist",
builtins.list[Any]
Any"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element**
encoding
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX"35"36"37"µ
tostringlist"xml.etree.ElementTree.tostringlist»
tostringlist"xml.etree.ElementTree.tostringlist"P
builtins.list[builtins.bytes] 
builtins.bytes"builtins.bytes"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*
encoding
None *R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadXÔ
tostringlist"xml.etree.ElementTree.tostringlist"J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element*E
encoding7
Literal[builtins.str]	
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX∂
tostringlist"xml.etree.ElementTree.tostringlist",
builtins.list[Any]
Any"builtins.list*K
element>
xml.etree.ElementTree.Element"xml.etree.ElementTree.Element**
encoding
builtins.str"builtins.str*R
methodD
Union[builtins.str,None]
builtins.str"builtins.str
None *^
xml_declarationG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *]
default_namespaceD
Union[builtins.str,None]
builtins.str"builtins.str
None *:
short_empty_elements
builtins.bool"builtins.bool 0:overloadX"38"39"310"±
canonicalize"xml.etree.ElementTree.canonicalize÷
canonicalize"xml.etree.ElementTree.canonicalize"
builtins.str"builtins.str*Ö
xml_datau
'Union[builtins.str,builtins.bytes,None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
None *
out
None *≥
	from_file°
yUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],builtins.int,typing.IO[Any],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO
None *3
with_comments
builtins.bool"builtins.bool *0

strip_text
builtins.bool"builtins.bool *6
rewrite_prefixes
builtins.bool"builtins.bool *†
qname_aware_tagsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *°
qname_aware_attrsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ù
exclude_attrsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ú
exclude_tagsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None 0:overloadXñ
canonicalize"xml.etree.ElementTree.canonicalize"
None*Ö
xml_datau
'Union[builtins.str,builtins.bytes,None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytes
None *g
out^
%_typeshed.SupportsWrite[builtins.str]
builtins.str"builtins.str"_typeshed.SupportsWrite*≥
	from_file°
yUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes],builtins.int,typing.IO[Any],None]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike
builtins.int"builtins.int$
typing.IO[Any]
Any"	typing.IO
None *3
with_comments
builtins.bool"builtins.bool *0

strip_text
builtins.bool"builtins.bool *6
rewrite_prefixes
builtins.bool"builtins.bool *†
qname_aware_tagsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *°
qname_aware_attrsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ù
exclude_attrsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None *ú
exclude_tagsá
)Union[typing.Iterable[builtins.str],None]N
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable
None 0:overloadX"38"39"310*R
Any
typing.Any"
builtins.object"builtins.object*27*35*36*37*38*39*310*d
Callabletyping.Callable*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*d
Optionaltyping.Optional*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*^
Tupletyping.Tuple*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*^
Uniontyping.Union*
typing._SpecialForm"typing._SpecialForm*27*35*36*37*38*39*310*c
VERSIONxml.etree.ElementTree.VERSION
builtins.str"builtins.str*27*35*36*37*38*39*310*à
PIxml.etree.ElementTree.PIK
CallableType[builtins.function]&
builtins.function"builtins.function*27*35*36*37*38*39*310*ò

fromstring xml.etree.ElementTree.fromstringK
CallableType[builtins.function]&
builtins.function"builtins.function*27*35*36*37*38*39*310*%
syssys *35*36*37*38*39*310*
Literaltyping_extensions.Literal@
typing_extensions._SpecialForm"typing_extensions._SpecialForm*35*36*37*38*39*310